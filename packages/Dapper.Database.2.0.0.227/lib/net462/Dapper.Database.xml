<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dapper.Database</name>
    </assembly>
    <members>
        <member name="T:Dapper.Database.Adapters.FirebirdAdapter">
            <summary>
                The Firebird database adapter.
            </summary>
        </member>
        <member name="M:Dapper.Database.Adapters.FirebirdAdapter.Insert``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToInsert">Entity to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.FirebirdAdapter.UpdateInternal``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Dapper.Database.Adapters.FirebirdAdapter.InsertAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToInsert">Entity to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.FirebirdAdapter.UpdateInternalAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Dapper.Database.Adapters.FirebirdAdapter.ExistsQuery(Dapper.Database.TableInfo,System.String)">
            <summary>
                Default implementation of an Exists query
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="sql">a sql statement or partial statement</param>
            <returns>A sql statement that selects true if a record matches</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.FirebirdAdapter.GetPageListQuery(Dapper.Database.TableInfo,System.Int64,System.Int64,System.String,Dapper.DynamicParameters)">
            <summary>
                Default implementation of a a paged sql statement
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="page">the page to request</param>
            <param name="pageSize">the size of the page to request</param>
            <param name="sql">a sql statement or partial statement</param>
            <param name="parameters">the dynamic parameters for the query</param>
            <returns>A paginated sql statement</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.FirebirdAdapter.EscapeTableName(Dapper.Database.TableInfo)">
            <summary>
                Applies a schema name is one is specified
            </summary>
            <param name="tableInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Adapters.FirebirdAdapter.EscapeTableName(System.String)">
            <summary>
                Returns the format for table name
            </summary>
        </member>
        <member name="M:Dapper.Database.Adapters.FirebirdAdapter.EscapeColumn(System.String)">
            <summary>
                Returns the format for column
            </summary>
        </member>
        <member name="T:Dapper.Database.Adapters.ISqlAdapter">
            <summary>
                The interface for all Dapper.Database database operations
                Implementing this is each provider's model.
            </summary>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.Insert``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">Table information</param>
            <param name="entityToInsert">Entity to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.InsertList``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">Table information</param>
            <param name="entitiesToInsert">List of Entities to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.Update``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                updates an entity into table "Ts"
            </summary>
            <typeparam name="T">the entity type</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">Table information</param>
            <param name="entityToUpdate">Entity to update</param>
            <param name="columnsToUpdate">A list of columns to update</param>
            <returns>true if the entity was updated</returns>
            <exception cref="T:Dapper.Database.OptimisticConcurrencyException">
                if <paramref name="entityToUpdate" /> was modified by a different
                connection
            </exception>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.UpdateList``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                updates an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">Table information</param>
            <param name="entitiesToUpdate">List of Entities to update</param>
            <param name="columnsToUpdate">A list of columns to update</param>
            <returns>true if the entity was updated</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.Upsert``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts entity
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToUpsert">Entity to Update Or Insert to update</param>
            <param name="columnsToUpdate">A list of columns to update</param>
            <param name="insertAction">Callback action when inserting</param>
            <param name="updateAction">Update action when updating</param>
            <returns>true if inserted or updated, false if not</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.UpsertList``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts entities
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entitiesToUpsert">List of Entities to Update Or Insert to update</param>
            <param name="columnsToUpdate">A list of columns to update</param>
            <param name="insertAction">Callback action when inserting</param>
            <param name="updateAction">Update action when updating</param>
            <returns>true if inserted or updated, false if not</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.Exists``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <summary>
                Tests whether an entity exists in table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entity">Entity to check</param>
            <returns>true if the entity exists</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.InsertQuery(Dapper.Database.TableInfo)">
            <summary>
                constructs an insert query
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <returns>An insert sql statement</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.UpdateQuery(Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Returns an update query
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="columnsToUpdate">columns to be updated</param>
            <returns>An update sql statement</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.CountQuery(Dapper.Database.TableInfo,System.String)">
            <summary>
                Returns a count query
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="sql">a sql statement or partial statement</param>
            <returns>A count sql statement</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.DeleteQuery(Dapper.Database.TableInfo,System.String)">
            <summary>
                Returns a delete query
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="sql">
                a sql statement or partial statement.
                If NULL is passed in, this will return a DELETE without a WHERE condition. This will typically delete all data from
                the database.
            </param>
            <returns>A delete sql statement</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.ExistsQuery(Dapper.Database.TableInfo,System.String)">
            <summary>
                Returns an exists query
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="sql">a sql statement or partial statement</param>
            <returns>An exists sql statement</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.GetQuery(Dapper.Database.TableInfo,System.String,System.Boolean)">
            <summary>
                Returns a get query
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="sql">a sql statement or partial statement</param>
            <param name="fromCache"></param>
            <returns>A get sql statement</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.GetListQuery(Dapper.Database.TableInfo,System.String)">
            <summary>
                Returns a get list query
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="sql">a sql statement or partial statement</param>
            <returns>A get list statement</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.GetPageListQuery(Dapper.Database.TableInfo,System.Int64,System.Int64,System.String,Dapper.DynamicParameters)">
            <summary>
                Returns a get paged list query
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="page">the page requested</param>
            <param name="pageSize">number of records to return</param>
            <param name="sql">a sql statement or partial statement</param>
            <param name="parameters">the dynamic parameters for the query</param>
            <returns>A paginated get sql statement</returns>
            <remarks>
                If supported, the parameters will be added to <paramref name="parameters" />.
            </remarks>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.InsertAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">Table information</param>
            <param name="entityToInsert">Entity to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.InsertListAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">Table information</param>
            <param name="entitiesToInsert">List of Entities to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.UpdateAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                updates an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">Table information</param>
            <param name="entityToUpdate">Entity to update</param>
            <param name="columnsToUpdate">A list of columns to update</param>
            <returns>true if the entity was updated</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.UpdateListAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates entity
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">Table information</param>
            <param name="entitiesToUpdate">List of Entities to update</param>
            <param name="columnsToUpdate">A list of columns to update</param>
            <returns>true if the entity was updated</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.UpsertAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts entity
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToUpsert">Entity to Update Or Insert to update</param>
            <param name="columnsToUpdate">A list of columns to update</param>
            <param name="insertAction">Callback action when inserting</param>
            <param name="updateAction">Update action when updating</param>
            <returns>true if inserted or updated, false if not</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.UpsertListAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts entities
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entitiesToUpsert">List of Entities to Update Or Insert to update</param>
            <param name="columnsToUpdate">A list of columns to update</param>
            <param name="insertAction">Callback action when inserting</param>
            <param name="updateAction">Update action when updating</param>
            <returns>true if inserted or updated, false if not</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.ISqlAdapter.EscapeWhereList(System.Collections.Generic.IEnumerable{Dapper.Database.ColumnInfo})">
            <summary>
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.Database.Adapters.MySqlAdapter">
            <summary>
                The Postgres database adapter.
            </summary>
        </member>
        <member name="M:Dapper.Database.Adapters.MySqlAdapter.Insert``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToInsert">Entity to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.MySqlAdapter.UpdateInternal``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Dapper.Database.Adapters.MySqlAdapter.InsertAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToInsert">Entity to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.MySqlAdapter.UpdateInternalAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Dapper.Database.Adapters.MySqlAdapter.ExistsQuery(Dapper.Database.TableInfo,System.String)">
            <summary>
                Default implementation of an Exists query
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="sql">a sql statement or partial statement</param>
            <returns>A sql statement that selects true if a record matches</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.MySqlAdapter.EscapeTableName(Dapper.Database.TableInfo)">
            <summary>
                Applies a schema name is one is specified
            </summary>
            <param name="tableInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Adapters.MySqlAdapter.EscapeTableName(System.String)">
            <summary>
                Returns the format for table name
            </summary>
        </member>
        <member name="M:Dapper.Database.Adapters.MySqlAdapter.EscapeColumn(System.String)">
            <summary>
                Returns the format for column
            </summary>
        </member>
        <member name="T:Dapper.Database.Adapters.Oracle11gAdapter">
            <summary>
                Oracle database adapter for Oracle 11g.
            </summary>
            <seealso cref="T:Dapper.Database.Adapters.OracleAdapter">For Oracle 12.1 and later.</seealso>
        </member>
        <member name="M:Dapper.Database.Adapters.Oracle11gAdapter.BuildInsertQuery(Dapper.Database.TableInfo)">
            <summary>
                Simulates <c>INSERT..RETURNING</c> with a PL/SQL block that does an <c>INSERT</c> followed by a <c>SELECT</c>.
            </summary>
            <param name="tableInfo"></param>
            <returns>the PL/SQL block</returns>
            <remarks>
                <para>
                    ORACRAP: The managed ODP.Net drivers do not properly handle variable-sized outputs when running an
                    UPDATE..RETURNING against Oracle 11g.
                    I suspect this is the result of a difference in what is sent over the wire between 11.2 and 12.2, and the
                    managed driver not handling the difference.
                </para>
                <para>
                    This holds true even if we run UPDATE..RETURNING in a PL/SQL block.
                    However, it *does* properly work on INSERT..RETURNING and a PL/SQL block doing UPDATE, then SELECT.
                    There should be no risk of a race condition as the row should be locked for the duration of the execution.
                </para>
            </remarks>
        </member>
        <member name="M:Dapper.Database.Adapters.Oracle11gAdapter.BuildInsertParameters``1(Dapper.Database.TableInfo,``0)">
            <inheritdoc />
        </member>
        <member name="M:Dapper.Database.Adapters.Oracle11gAdapter.BuildUpdateQuery(Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Simulates <c>UPDATE..RETURNING</c> with a PL/SQL block that does an <c>UPDATE</c> followed by a <c>SELECT</c>.
            </summary>
            <param name="tableInfo"></param>
            <param name="columnsToUpdate"></param>
            <returns>the PL/SQL block</returns>
            <remarks>
                <para>
                    ORACRAP: The managed ODP.Net drivers do not properly handle variable-sized outputs when running an
                    UPDATE..RETURNING against Oracle 11g.
                    I suspect this is the result of a difference in what is sent over the wire between 11.2 and 12.2, and the
                    managed driver not handling the difference.
                </para>
                <para>
                    This holds true even if we run UPDATE..RETURNING in a PL/SQL block.
                    However, it *does* properly work on INSERT..RETURNING and a PL/SQL block doing UPDATE, then SELECT.
                    There should be no risk of a race condition as the row should be locked for the duration of the execution.
                </para>
            </remarks>
        </member>
        <member name="M:Dapper.Database.Adapters.Oracle11gAdapter.BuildUpdateParameters``1(Dapper.Database.TableInfo,``0)">
            <inheritdoc />
        </member>
        <member name="M:Dapper.Database.Adapters.Oracle11gAdapter.GetPageListQuery(Dapper.Database.TableInfo,System.Int64,System.Int64,System.String,Dapper.DynamicParameters)">
            <summary>
                Constructs a paged sql statement
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="page">the page to request</param>
            <param name="pageSize">the size of the page to request</param>
            <param name="sql">a sql statement or partial statement</param>
            <param name="parameters">the dynamic parameters for the query</param>
            <returns>A paginated sql statement</returns>
            <remarks>
                Oracle supports binding <c>offset</c> and <paramref name="pageSize" /> as <paramref name="parameters" />.
            </remarks>
        </member>
        <member name="T:Dapper.Database.Adapters.OracleAdapter">
            <summary>
                The Oracle database adapter for modern Oracle databases.
            </summary>
            <remarks>
                Supports 12.1 and later.
            </remarks>
            <seealso cref="T:Dapper.Database.Adapters.Oracle11gAdapter" />
            <summary>
                The Oracle database adapter for modern Oracle databases.
            </summary>
            <summary>
                The Oracle database adapter for modern Oracle databases.
            </summary>
        </member>
        <member name="F:Dapper.Database.Adapters.OracleAdapter.RowCountParamName">
            <summary>
                The variable name used for row count.
            </summary>
            <seealso cref="M:Dapper.Database.Adapters.OracleAdapter.ResolveRowCount(System.Int32,Dapper.DynamicParameters)" />
        </member>
        <member name="P:Dapper.Database.Adapters.OracleAdapter.PageSizeParamName">
            <inheritdoc />
            <remarks>
                Oracle does not like bind variables starting with underscores, so we have to use different ones.
            </remarks>
        </member>
        <member name="P:Dapper.Database.Adapters.OracleAdapter.PageSkipParamName">
            <inheritdoc />
            <remarks>
                Oracle does not like bind variables starting with underscores, so we have to use different ones.
            </remarks>
        </member>
        <member name="M:Dapper.Database.Adapters.OracleAdapter.ResolveRowCount(System.Int32,Dapper.DynamicParameters)">
            <summary>
                Resolves row count depending on whether the statement return count is from PL/SQL or not.
            </summary>
            <param name="count">The statement return count (can be -1, 0, or a positive number).</param>
            <param name="parameters">The parameters used in the statement.</param>
            <returns>The actual count (zero or more).</returns>
            <remarks>
                PL/SQL blocks will automatically return -1 for rows affected.
                The only way to get an accurate count is to bind an additional variable in PL/SQL and capture the builtin variable
                <c>ROW_COUNT$$</c>;
                this is the name of the bind variable containing the value.
            </remarks>
        </member>
        <member name="M:Dapper.Database.Adapters.OracleAdapter.BuildBaseInsertQuery(Dapper.Database.TableInfo)">
            <inheritdoc cref="M:Dapper.Database.Adapters.SqlAdapter.BuildInsertQuery(Dapper.Database.TableInfo)" />
        </member>
        <member name="M:Dapper.Database.Adapters.OracleAdapter.BuildInsertQuery(Dapper.Database.TableInfo)">
            <summary>
                Oracle implementation of an insert query.
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <returns>An insert sql statement</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.OracleAdapter.BuildInsertParameters``1(Dapper.Database.TableInfo,``0)">
            <summary>
                Converts the specified entity to parameters for an INSERT statement.
            </summary>
            <typeparam name="T">the type of entity to bind</typeparam>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToInsert">the entity to be inserted</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Adapters.OracleAdapter.BuildBaseUpdateQuery(Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:Dapper.Database.Adapters.SqlAdapter.BuildUpdateQuery(Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{System.String})" />
        </member>
        <member name="M:Dapper.Database.Adapters.OracleAdapter.BuildUpdateQuery(Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Oracle implementation of an update query.
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="columnsToUpdate">columns to be updated</param>
            <returns>An update sql statement</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.OracleAdapter.BuildUpdateParameters``1(Dapper.Database.TableInfo,``0)">
            <summary>
                Converts the specified entity to parameters for an UPDATE statement.
            </summary>
            <typeparam name="T">the type of entity to bind</typeparam>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToUpdate">the entity to be updated</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Adapters.OracleAdapter.ExistsQuery(Dapper.Database.TableInfo,System.String)">
            <summary>
                Oracle-specific implementation of an Exists query.
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="sql">a sql statement or partial statement</param>
            <returns>A sql statement that selects true if a record matches</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.OracleAdapter.GetPageListQuery(Dapper.Database.TableInfo,System.Int64,System.Int64,System.String,Dapper.DynamicParameters)">
            <inheritdoc />
        </member>
        <member name="M:Dapper.Database.Adapters.OracleAdapter.EscapeParameters(System.Collections.Generic.IEnumerable{Dapper.Database.ColumnInfo})">
            <summary>
                Returns the format for parameters
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Adapters.OracleAdapter.EscapeReturnParameters(System.Collections.Generic.IEnumerable{Dapper.Database.ColumnInfo})">
            <summary>
                Returns the format for parameters
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Adapters.OracleAdapter.EscapeTableName(Dapper.Database.TableInfo)">
            <summary>
                Applies a schema name is one is specified
            </summary>
            <param name="tableInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Adapters.OracleAdapter.EscapeTableName(System.String)">
            <summary>
                Returns the format for table name
            </summary>
        </member>
        <member name="M:Dapper.Database.Adapters.OracleAdapter.EscapeColumn(System.String)">
            <summary>
                Returns the format for column
            </summary>
        </member>
        <member name="M:Dapper.Database.Adapters.OracleAdapter.EscapeParameter(System.String)">
            <summary>
                Returns the format for parameter
            </summary>
        </member>
        <member name="M:Dapper.Database.Adapters.OracleAdapter.Insert``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <inheritdoc />
        </member>
        <member name="M:Dapper.Database.Adapters.OracleAdapter.UpdateInternal``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Dapper.Database.Adapters.OracleAdapter.InsertAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <inheritdoc />
        </member>
        <member name="M:Dapper.Database.Adapters.OracleAdapter.UpdateInternalAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="T:Dapper.Database.Adapters.PostgresAdapter">
            <summary>
                The Postgres database adapter.
            </summary>
        </member>
        <member name="M:Dapper.Database.Adapters.PostgresAdapter.Insert``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToInsert">Entity to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.PostgresAdapter.UpdateInternal``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Dapper.Database.Adapters.PostgresAdapter.InsertAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToInsert">Entity to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.PostgresAdapter.UpdateInternalAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Dapper.Database.Adapters.PostgresAdapter.EscapeTableName(Dapper.Database.TableInfo)">
            <summary>
                Applies a schema name is one is specified
            </summary>
            <param name="tableInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Adapters.PostgresAdapter.EscapeTableName(System.String)">
            <summary>
                Returns the format for table name
            </summary>
        </member>
        <member name="M:Dapper.Database.Adapters.PostgresAdapter.EscapeColumn(System.String)">
            <summary>
                Returns the format for column
            </summary>
        </member>
        <member name="T:Dapper.Database.Adapters.SqlAdapter">
            <summary>
                Base class for SqlAdapter handlers - provides default/common handling for different database engines
            </summary>
        </member>
        <member name="F:Dapper.Database.Adapters.SqlAdapter.ExistsQueries">
            <summary>
                Cache for Exists Object Queries
            </summary>
        </member>
        <member name="F:Dapper.Database.Adapters.SqlAdapter.GetQueries">
            <summary>
                Cache for Get Queries
            </summary>
        </member>
        <member name="F:Dapper.Database.Adapters.SqlAdapter.InsertQueries">
            <summary>
                Cache for Insert Queries
            </summary>
        </member>
        <member name="F:Dapper.Database.Adapters.SqlAdapter.UpdateQueries">
            <summary>
                Cache for Update Queries
            </summary>
        </member>
        <member name="P:Dapper.Database.Adapters.SqlAdapter.PageSizeParamName">
            <summary>
                Parameter name for page size in <see cref="M:Dapper.Database.Adapters.SqlAdapter.GetPageListQuery(Dapper.Database.TableInfo,System.Int64,System.Int64,System.String,Dapper.DynamicParameters)" />.
            </summary>
        </member>
        <member name="P:Dapper.Database.Adapters.SqlAdapter.PageSkipParamName">
            <summary>
                Parameter name for page skip in <see cref="M:Dapper.Database.Adapters.SqlAdapter.GetPageListQuery(Dapper.Database.TableInfo,System.Int64,System.Int64,System.String,Dapper.DynamicParameters)" />.
            </summary>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.InsertQuery(Dapper.Database.TableInfo)">
            <summary>
                Default implementation of an insert query
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <returns>An insert sql statement</returns>
            <remarks>
                Statements are cached by type handle.
            </remarks>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.UpdateQuery(Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Default implementation of an update query
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="columnsToUpdate">columns to be updated</param>
            <returns>An update sql statement</returns>
            <remarks>
                Statements are cached by type handle.
            </remarks>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.CountQuery(Dapper.Database.TableInfo,System.String)">
            <summary>
                Default implementation of a count query
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="sql">a sql statement or partial statement</param>
            <returns>A sql statement that selects the count of matching records</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.DeleteQuery(Dapper.Database.TableInfo,System.String)">
            <summary>
                Default implementation of a delete query
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="sql">a sql statement or partial statement</param>
            <returns>A sql statement that deletes</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.ExistsQuery(Dapper.Database.TableInfo,System.String)">
            <summary>
                Default implementation of an Exists query
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="sql">a sql statement or partial statement</param>
            <returns>A sql statement that selects true if a record matches</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.GetQuery(Dapper.Database.TableInfo,System.String,System.Boolean)">
            <summary>
                Default implementation of a Get Query
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="sql">a sql statement or partial statement</param>
            <param name="cache">true if this query should be cached</param>
            <returns>A sql statement that selects a single item</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.GetListQuery(Dapper.Database.TableInfo,System.String)">
            <summary>
                Default implementation of a Get List query
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="sql">a sql statement or partial statement</param>
            <returns>A sql statement</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.GetPageListQuery(Dapper.Database.TableInfo,System.Int64,System.Int64,System.String,Dapper.DynamicParameters)">
            <summary>
                Default implementation of a a paged sql statement
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="page">the page to request</param>
            <param name="pageSize">the size of the page to request</param>
            <param name="sql">a sql statement or partial statement</param>
            <param name="parameters">the dynamic parameters for the query</param>
            <returns>A paginated sql statement</returns>
            <remarks>
                Base implementation does not modify <paramref name="parameters" />.
            </remarks>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.EscapeWhereList(System.Collections.Generic.IEnumerable{Dapper.Database.ColumnInfo})">
            <summary>
                Returns the format for a collection of columns in the <c>WHERE</c> clause.
            </summary>
            <param name="columns"></param>
            <returns>A <see cref="T:System.String" /> consisting of all column equality expression, joined by <c>AND</c>.</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.ExistsQuery(Dapper.Database.TableInfo)">
            <summary>
                Default implementation of an exists object query
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <returns>An exists sql statement</returns>
            <remarks>
                Statements are cached by type handle.
            </remarks>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.EscapeWhereColumn(Dapper.Database.ColumnInfo)">
            <summary>
                Returns the format for a single column in the <c>WHERE</c> clause.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.BuildInsertQuery(Dapper.Database.TableInfo)">
            <summary>
                Default implementation of an insert query.
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <returns>An insert sql statement</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.BuildUpdateQuery(Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Default implementation of an update query.
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="columnsToUpdate">columns to be updated</param>
            <returns>An update sql statement</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.BuildExistsQuery(Dapper.Database.TableInfo)">
            <summary>
                Default implementation of an exists object query.
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <returns>An exists sql statement</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.EscapeTableName(Dapper.Database.TableInfo)">
            <summary>
                Returns the format for table name
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.EscapeTableName(System.String)">
            <summary>
                Returns the format for table name
            </summary>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.EscapeColumn(System.String)">
            <summary>
                Returns the format for column
            </summary>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.EscapeParameter(System.String)">
            <summary>
                Returns the format for parameter
            </summary>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.EscapeColumnList(System.Collections.Generic.IEnumerable{Dapper.Database.ColumnInfo},System.String)">
            <summary>
                Returns the format for columns
            </summary>
            <param name="columns"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.EscapeColumnListWithAliases(System.Collections.Generic.IEnumerable{Dapper.Database.ColumnInfo},System.String)">
            <summary>
                Returns the format for columns
            </summary>
            <param name="columns"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.EscapeParameters(System.Collections.Generic.IEnumerable{Dapper.Database.ColumnInfo})">
            <summary>
                Returns the format for parameters
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.EscapeAssignmentList(System.Collections.Generic.IEnumerable{Dapper.Database.ColumnInfo})">
            <summary>
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.ApplyGeneratedValues``1(Dapper.Database.TableInfo,``0,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableInfo"></param>
            <param name="entity"></param>
            <param name="returnValues"></param>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.Insert``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToInsert">Entity to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.InsertList``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entitiesToInsert">List of Entities to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.InsertAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToInsert">Entity to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.InsertListAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entitiesToInsert">List of Entities to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.UpdateInternal``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Performs the SQL <c>UPDATE</c> statement for <see cref="M:Dapper.Database.Adapters.SqlAdapter.Update``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})" />.
            </summary>
            <typeparam name="T">the entity type</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToUpdate">Entity to update</param>
            <param name="columnsToUpdate">A list of columns to update</param>
            <returns>true if the entity was updated</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.Update``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                updates an entity into table "Ts"
            </summary>
            <typeparam name="T">the entity type</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToUpdate">Entity to update</param>
            <param name="columnsToUpdate">A list of columns to update</param>
            <returns>true if the entity was updated</returns>
            <exception cref="T:Dapper.Database.OptimisticConcurrencyException">
                if <paramref name="entityToUpdate" /> was modified by a different
                connection
            </exception>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.UpdateList``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                updates an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entitiesToUpdate">List Entities to update</param>
            <param name="columnsToUpdate">A list of columns to update</param>
            <returns>true if the entity was updated</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.UpdateInternalAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Performs the SQL <c>UPDATE</c> statement for <see cref="M:Dapper.Database.Adapters.SqlAdapter.UpdateAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})" />.
            </summary>
            <typeparam name="T">the entity type</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToUpdate">Entity to update</param>
            <param name="columnsToUpdate">A list of columns to update</param>
            <returns>true if the entity was updated</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.UpdateAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                updates an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToUpdate">Entity to update</param>
            <param name="columnsToUpdate">A list of columns to update</param>
            <returns>true if the entity was updated</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.UpdateListAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                updates an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entitiesToUpdate">List Entities to update</param>
            <param name="columnsToUpdate">A list of columns to update</param>
            <returns>true if the entity was updated</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.Upsert``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0})">
            <summary>
                Updates entity in table "Ts", checks if the entity is modified if the entity is tracked by the Get() extension.
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToUpsert">Entity to Update Or Insert to update</param>
            <param name="columnsToUpdate">A list of columns to update</param>
            <param name="insertAction">Callback action when inserting</param>
            <param name="updateAction">Update action when updating</param>
            <returns>true if inserted or updated, false if not</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.UpsertList``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0})">
            <summary>
                Updates entity in table "Ts", checks if the entity is modified if the entity is tracked by the Get() extension.
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entitiesToUpsert">Entity to Update Or Insert to update</param>
            <param name="columnsToUpdate">A list of columns to update</param>
            <param name="insertAction">Callback action when inserting</param>
            <param name="updateAction">Update action when updating</param>
            <returns>true if inserted or updated, false if not</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.UpsertAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0})">
            <summary>
                Updates entity in table "Ts", checks if the entity is modified if the entity is tracked by the Get() extension.
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToUpsert">Entity to Update Or Insert to update</param>
            <param name="columnsToUpdate">A list of columns to update</param>
            <param name="insertAction">Callback action when inserting</param>
            <param name="updateAction">Update action when updating</param>
            <returns>true if inserted or updated, false if not</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.UpsertListAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0})">
            <summary>
                Updates entity in table "Ts", checks if the entity is modified if the entity is tracked by the Get() extension.
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entitiesToUpsert">Entity to Update Or Insert to update</param>
            <param name="columnsToUpdate">A list of columns to update</param>
            <param name="insertAction">Callback action when inserting</param>
            <param name="updateAction">Update action when updating</param>
            <returns>true if inserted or updated, false if not</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.Exists``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <summary>
                Tests whether an entity exists in table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entity">Entity to check</param>
            <returns>true if the entity exists</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlAdapter.ExistsAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <summary>
                Tests whether an entity exists in table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entity">Entity to check</param>
            <returns>true if the entity exists</returns>
        </member>
        <member name="T:Dapper.Database.Adapters.SqlCeServerAdapter">
            <summary>
                The SQL Server Compact Edition database adapter.
            </summary>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlCeServerAdapter.Insert``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToInsert">Entity to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlCeServerAdapter.UpdateInternal``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Dapper.Database.Adapters.SqlCeServerAdapter.GetPageListQuery(Dapper.Database.TableInfo,System.Int64,System.Int64,System.String,Dapper.DynamicParameters)">
            <summary>
                Constructs a paged sql statement
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="page">the page to request</param>
            <param name="pageSize">the size of the page to request</param>
            <param name="sql">a sql statement or partial statement</param>
            <param name="parameters">the dynamic parameters for the query</param>
            <returns>A paginated sql statement</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlCeServerAdapter.InsertAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToInsert">Entity to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlCeServerAdapter.UpdateInternalAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Dapper.Database.Adapters.SqlCeServerAdapter.EscapeWhereColumn(Dapper.Database.ColumnInfo)">
            <summary>
                Returns the format for a single column in the <c>WHERE</c> clause.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.Database.Adapters.SQLiteAdapter">
            <summary>
                The SQLite database adapter.
            </summary>
        </member>
        <member name="M:Dapper.Database.Adapters.SQLiteAdapter.Insert``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToInsert">Entity to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SQLiteAdapter.UpdateInternal``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Dapper.Database.Adapters.SQLiteAdapter.InsertAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToInsert">Entity to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SQLiteAdapter.UpdateInternalAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="T:Dapper.Database.Adapters.SqlServerAdapter">
            <summary>
                The SQL Server database adapter.
            </summary>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlServerAdapter.Insert``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToInsert">Entity to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlServerAdapter.UpdateInternal``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Dapper.Database.Adapters.SqlServerAdapter.InsertAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0)">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="tableInfo">table information about the entity</param>
            <param name="entityToInsert">Entity to insert</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlServerAdapter.UpdateInternalAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},Dapper.Database.TableInfo,``0,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Dapper.Database.Adapters.SqlServerAdapter.GetPageListQuery(Dapper.Database.TableInfo,System.Int64,System.Int64,System.String,Dapper.DynamicParameters)">
            <summary>
                Constructs a paged sql statement
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="page">the page to request</param>
            <param name="pageSize">the size of the page to request</param>
            <param name="sql">a sql statement or partial statement</param>
            <param name="parameters">the dynamic parameters for the query</param>
            <returns>A paginated sql statement</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlServerAdapter.EscapeTableName(Dapper.Database.TableInfo)">
            <summary>
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlServerAdapter.BuildInsertQuery(Dapper.Database.TableInfo)">
            <summary>
                implementation of an insert query.
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <returns>An insert sql statement</returns>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlServerAdapter.BuildUpdateQuery(Dapper.Database.TableInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Default implementation of an update query.
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="columnsToUpdate">columns to be updated</param>
            <returns>An update sql statement</returns>
        </member>
        <member name="T:Dapper.Database.Adapters.SqlServerPre2012Adapter">
            <summary>
                The SQL Server database adapter.
            </summary>
        </member>
        <member name="M:Dapper.Database.Adapters.SqlServerPre2012Adapter.GetPageListQuery(Dapper.Database.TableInfo,System.Int64,System.Int64,System.String,Dapper.DynamicParameters)">
            <summary>
                Constructs a paged sql statement
            </summary>
            <param name="tableInfo">table information about the entity</param>
            <param name="page">the page to request</param>
            <param name="pageSize">the size of the page to request</param>
            <param name="sql">a sql statement or partial statement</param>
            <param name="parameters">the dynamic parameters for the query</param>
            <returns>A paginated sql statement</returns>
        </member>
        <member name="T:Dapper.Database.Attributes.IgnoreAttribute">
            <summary>
                Specifies whether a property should be completely ignored
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Dapper.Database.Attributes.IgnoreInsertAttribute">
            <summary>
                Specifies whether a field is able to be inserted in the database.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Dapper.Database.Attributes.IgnoreUpdateAttribute">
            <summary>
                Specifies whether a field is able to be updated in the database.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Dapper.Database.Attributes.IgnoreSelectAttribute">
            <summary>
                Specifies whether a field should be returned from the database.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Dapper.Database.Attributes.ReadOnlyAttribute">
            <summary>
                Specifies whether a field is read only (same as computed).
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Dapper.Database.Attributes.SequenceAttribute">
            <summary>
                Oracle sequence
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Dapper.Database.Attributes.SequenceAttribute.#ctor(System.String)">
            <summary>
                Used to select identities from Oracle
            </summary>
        </member>
        <member name="P:Dapper.Database.Attributes.SequenceAttribute.Name">
            <summary>
                Name of the Oracle sequence
            </summary>
        </member>
        <member name="T:Dapper.Database.Attributes.SqlServerSelectComputedAttribute">
            <summary>
                Specifies whether a field is read only (same as computed).
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Dapper.Database.ConcurrentDictionaryEx">
            <summary>
            </summary>
        </member>
        <member name="M:Dapper.Database.ConcurrentDictionaryEx.Acquire(System.Collections.Concurrent.ConcurrentDictionary{System.RuntimeTypeHandle,System.String},System.RuntimeTypeHandle,System.Func{System.Boolean},System.Func{System.String})">
            <summary>
            </summary>
            <param name="concurrentDict"></param>
            <param name="handle"></param>
            <param name="fromCache"></param>
            <param name="retrieve"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.Database.IConnectionService">
            <summary>
                Represents a service that returns a database connection
            </summary>
        </member>
        <member name="M:Dapper.Database.IConnectionService.GetConnection">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dapper.Database.StringConnectionService`1">
            <summary>
            </summary>
        </member>
        <member name="M:Dapper.Database.StringConnectionService`1.#ctor(System.String)">
            <summary>
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:Dapper.Database.StringConnectionService`1.GetConnection">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dapper.Database.ConfigConnectionService`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dapper.Database.ConfigConnectionService`1.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="key">the key in app.config or web.config</param>
        </member>
        <member name="M:Dapper.Database.ConfigConnectionService`1.GetConnection">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dapper.Database.Extensions.DynamicParametersExtensions">
            <summary>
                Extension methods for <see cref="T:Dapper.DynamicParameters" />.
            </summary>
        </member>
        <member name="M:Dapper.Database.Extensions.DynamicParametersExtensions.Output``1(Dapper.DynamicParameters,``0,Dapper.Database.ColumnInfo,System.Nullable{System.Data.DbType},System.Nullable{System.Int32})">
            <summary>
                Allows you to automatically populate a target property/field from output parameters. It actually
                creates an InputOutput parameter, so you can still pass data in.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parameters">this</param>
            <param name="target">The object whose property/field you wish to populate.</param>
            <param name="column">A <see cref="T:Dapper.Database.ColumnInfo" /> targeting a property/field of the target (or descendant thereof.)</param>
            <param name="dbType"></param>
            <param name="size">The size to set on the parameter. Defaults to 0, or DbString.DefaultLength in case of strings.</param>
            <returns>The DynamicParameters instance</returns>
            <seealso
                cref="M:Dapper.DynamicParameters.Output``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Data.DbType},System.Nullable{System.Int32})" />
        </member>
        <member name="T:Dapper.Database.Extensions.EnumerableExtensions">
            <summary>
                Internal helpers for chained LINQ expressions.
            </summary>
        </member>
        <member name="M:Dapper.Database.Extensions.EnumerableExtensions.SingleOrDefaultOfType``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
                Returns the only dynamic element of an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has a specific type name.
            </summary>
            <param name="source"></param>
            <param name="typeName"></param>
            <returns>The item (if found) as a <see langword="dynamic" />, or null if not found.</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.EnumerableExtensions.SingleOrDefaultOfType``1(System.Collections.IEnumerable)">
            <summary>
                Returns the only element of an <see cref="T:System.Collections.IEnumerable" /> that is a specific type or a default value if the
                sequence is empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Extensions.EnumerableExtensions.AnyOfType``1(System.Collections.IEnumerable)">
            <summary>
                Returns whether any elements of an <see cref="T:System.Collections.IEnumerable" /> are of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.Database.Extensions.PropertyExtensions">
            <summary>
                Internal helpers for types.
            </summary>
        </member>
        <member name="M:Dapper.Database.Extensions.PropertyExtensions.IsNullable(System.Reflection.PropertyInfo)">
            <summary>
                Gets whether a specified property is nullable.
            </summary>
            <param name="property"></param>
            <returns>
                true if the property is nullable, false otherwise.
            </returns>
        </member>
        <member name="T:Dapper.Database.Extensions.SqlMapperExtensions">
            <summary>
                The Dapper.Database extensions for Dapper
            </summary>
            <summary>
                The Dapper.Contrib extensions for Dapper
            </summary>
            <summary>
                The Dapper.Contrib extensions for Dapper
            </summary>
            <summary>
                The Dapper.Database extensions for Dapper
            </summary>
            <summary>
                The Dapper.Database extensions for Dapper
            </summary>
            <summary>
                The Dapper.Database extensions for Dapper
            </summary>
            <summary>
                The Dapper.Database extensions for Dapper
            </summary>
            <summary>
                The Dapper.Database extensions for Dapper
            </summary>
            <summary>
                The Dapper.Contrib extensions for Dapper
            </summary>
            <summary>
                The Dapper.Contrib extensions for Dapper
            </summary>
            <summary>
                The Dapper.Contrib extensions for Dapper
            </summary>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Count(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Count of entities
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause to count</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>Return Total Count of matching records</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Count(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Count of entities
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause to count</param>
            <param name="parameters">The parameters of the where clause to count</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>Return Total Count of matching records</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Count``1(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Count of entities
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause to count</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>Return Total Count of matching records</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Count``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Count of entities
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause to count</param>
            <param name="parameters">The parameters of the where clause to count</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>Return Total Count of matching records</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.CountAsync(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Count of entities
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause to count</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>Return Total Count of matching records</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.CountAsync(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Count of entities
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause to count</param>
            <param name="parameters">The parameters of the where clause to count</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>Return Total Count of matching records</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.CountAsync``1(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Count of entities
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause to count</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>Return Total Count of matching records</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.CountAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Count of entities
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause to count</param>
            <param name="parameters">The parameters of the where clause to count</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>Return Total Count of matching records</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Delete``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Delete entity in table "Ts" that match the key values of the entity (T) passed in
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToDelete">
                Entity to delete. If Keys are specified, they will be used as the WHERE condition to
                delete.
            </param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Delete``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Delete entity in table "Ts" by a primary key value specified on (T)
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="primaryKeyValue">a Single primary key to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Delete``1(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Delete entity in table "Ts" by an un-parameterized WHERE clause.
                If you want to Delete All of the data, call the DeleteAll() command
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="whereClause">The where clause to use to bound a delete, cannot be null, empty, or whitespace</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Delete``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Delete entity in table "Ts" by a parameterized WHERE clause, with Parameters passed in.
                If you want to Delete All of the data, call the DeleteAll() command
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="whereClause">The where clause to use to bound a delete, cannot be null, empty, or whitespace</param>
            <param name="parameters">The parameters of the where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.DeleteAll``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Delete ALL entities in table "Ts".
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.DeleteAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Delete entity in table "Ts" that match the key values of the entity (T) passed in
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToDelete">
                Entity to delete. If Keys are specified, they will be used as the WHERE condition to
                delete.
            </param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.DeleteAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Delete entity in table "Ts" by a primary key value specified on (T)
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="primaryKeyValue">a Single primary key to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.DeleteAsync``1(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Delete entity in table "Ts" by an un-parameterized WHERE clause.
                If you want to Delete All of the data, call the DeleteAll() command
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="whereClause">The where clause to use to bound a delete, cannot be null, empty, or whitespace</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.DeleteAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Delete entity in table "Ts" by a parameterized WHERE clause, with Parameters passed in.
                If you want to Delete All of the data, call the DeleteAll() command
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="whereClause">The where clause to use to bound a delete, cannot be null, empty, or whitespace</param>
            <param name="parameters">The parameters of the where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.DeleteAllAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Delete ALL entities in table "Ts".
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Exists``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Check if a record exists in table "Ts"
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entity">Entity to check</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if record is found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Exists``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Check if a record exists
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="primaryKey">a Single primary key to check</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if record is found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Exists``1(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Check if a record exists
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause to check for existence</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if record is found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Exists``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Check if a record exists
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause to check for existence</param>
            <param name="parameters">The parameters of the where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if record is found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.ExistsAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Check if a record exists
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToExists">Entity to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if record is found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.ExistsAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Check if a record exists
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="primaryKey">a Single primary key to check</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if record is found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.ExistsAsync``1(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Check if a record exists
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause to check for existence</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if record is found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.ExistsAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Check if a record exists
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause to check for existence</param>
            <param name="parameters">The parameters of the where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if record is found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Get``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'T'.
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToGet">Entity to Retrieve with keys populated</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>the entity, else null</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Get``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'T'.
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="primaryKey">a Single primary key to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>the entity, else null</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Get``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'T'.
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="parameters">The parameters of the sql</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>the entity, else null</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Get``2(System.Data.IDbConnection,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'T1'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="parameters">The parameters of the sql</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Get``3(System.Data.IDbConnection,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'T1'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Get``3(System.Data.IDbConnection,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'T1'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Get``4(System.Data.IDbConnection,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'T1'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Get``4(System.Data.IDbConnection,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'T1'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Get``3(System.Data.IDbConnection,System.Func{``0,``1,``2},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'TRet'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Get``3(System.Data.IDbConnection,System.Func{``0,``1,``2},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'TRet'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="parameters">Parameters of the sql clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Get``4(System.Data.IDbConnection,System.Func{``0,``1,``2,``3},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'TRet'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Get``4(System.Data.IDbConnection,System.Func{``0,``1,``2,``3},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'TRet'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="parameters">Parameters of the sql clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Get``5(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'TRet'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Get``5(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'TRet'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="parameters">Parameters of the sql clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'T'.
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToGet">Entity to Retrieve with keys populated</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>the entity, else null</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'T'.
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="primaryKey">a Single primary key to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>the entity, else null</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'T'.
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="parameters">The parameters of the sql</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>the entity, else null</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetAsync``2(System.Data.IDbConnection,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'T1'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="parameters">The parameters of the sql</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetAsync``3(System.Data.IDbConnection,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'T1'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetAsync``3(System.Data.IDbConnection,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'T1'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetAsync``4(System.Data.IDbConnection,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'T1'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetAsync``4(System.Data.IDbConnection,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'T1'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetAsync``3(System.Data.IDbConnection,System.Func{``0,``1,``2},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'TRet'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetAsync``3(System.Data.IDbConnection,System.Func{``0,``1,``2},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'TRet'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="parameters">Parameters of the sql clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetAsync``4(System.Data.IDbConnection,System.Func{``0,``1,``2,``3},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'TRet'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetAsync``4(System.Data.IDbConnection,System.Func{``0,``1,``2,``3},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'TRet'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="parameters">Parameters of the sql clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetAsync``5(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'TRet'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetAsync``5(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a single entity of type 'TRet'.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The sql clause</param>
            <param name="parameters">Parameters of the sql clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirst``1(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>enumerable list of entities</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirst``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">The parameters of the where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirst``2(System.Data.IDbConnection,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirst``2(System.Data.IDbConnection,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirst``3(System.Data.IDbConnection,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirst``3(System.Data.IDbConnection,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirst``4(System.Data.IDbConnection,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirst``4(System.Data.IDbConnection,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirst``3(System.Data.IDbConnection,System.Func{``0,``1,``2},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirst``3(System.Data.IDbConnection,System.Func{``0,``1,``2},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirst``4(System.Data.IDbConnection,System.Func{``0,``1,``2,``3},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirst``4(System.Data.IDbConnection,System.Func{``0,``1,``2,``3},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirst``5(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirst``5(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirstAsync``1(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>enumerable list of entities</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirstAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">The parameters of the where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirstAsync``2(System.Data.IDbConnection,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirstAsync``2(System.Data.IDbConnection,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirstAsync``3(System.Data.IDbConnection,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirstAsync``3(System.Data.IDbConnection,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirstAsync``4(System.Data.IDbConnection,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirstAsync``4(System.Data.IDbConnection,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirstAsync``3(System.Data.IDbConnection,System.Func{``0,``1,``2},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirstAsync``3(System.Data.IDbConnection,System.Func{``0,``1,``2},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirstAsync``4(System.Data.IDbConnection,System.Func{``0,``1,``2,``3},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirstAsync``4(System.Data.IDbConnection,System.Func{``0,``1,``2,``3},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirstAsync``5(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetFirstAsync``5(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns the first matching T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetList``1(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>enumerable list of entities</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetList``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">The parameters of the where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetList``2(System.Data.IDbConnection,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetList``2(System.Data.IDbConnection,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type T1.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetList``3(System.Data.IDbConnection,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type T1.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetList``3(System.Data.IDbConnection,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type T1.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetList``4(System.Data.IDbConnection,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type T1.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetList``4(System.Data.IDbConnection,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type T1.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetList``3(System.Data.IDbConnection,System.Func{``0,``1,``2},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type TRet.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetList``3(System.Data.IDbConnection,System.Func{``0,``1,``2},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type TRet.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetList``4(System.Data.IDbConnection,System.Func{``0,``1,``2,``3},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type TRet.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetList``4(System.Data.IDbConnection,System.Func{``0,``1,``2,``3},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type TRet.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetList``5(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type TRet.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetList``5(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type TRet.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetListAsync``1(System.Data.IDbConnection,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>enumerable list of entities</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetListAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">The parameters of the where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetListAsync``2(System.Data.IDbConnection,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetListAsync``2(System.Data.IDbConnection,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type T1.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetListAsync``3(System.Data.IDbConnection,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type T1.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetListAsync``3(System.Data.IDbConnection,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type T1.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetListAsync``4(System.Data.IDbConnection,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type T1.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetListAsync``4(System.Data.IDbConnection,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type T1.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetListAsync``3(System.Data.IDbConnection,System.Func{``0,``1,``2},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type TRet.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetListAsync``3(System.Data.IDbConnection,System.Func{``0,``1,``2},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type TRet.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetListAsync``4(System.Data.IDbConnection,System.Func{``0,``1,``2,``3},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type TRet.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetListAsync``4(System.Data.IDbConnection,System.Func{``0,``1,``2,``3},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type TRet.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetListAsync``5(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type TRet.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetListAsync``5(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type TRet.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetListImplAsync``1(System.Data.IDbConnection,Dapper.Database.Adapters.ISqlAdapter,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type T.
            </summary>
            <param name="connection">Sql Connection</param>
            <param name="adapter">ISqlAdapter for getting the sql statement</param>
            <param name="sql">The where clause</param>
            <param name="parameters">Parameters of the where clause</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>True if records are deleted</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageList``1(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="sql">The where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>enumerable list of entities</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageList``1(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">The parameters of the where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageList``2(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageList``2(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageList``3(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageList``3(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageList``4(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageList``4(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageList``3(System.Data.IDbConnection,System.Int32,System.Int32,System.Func{``0,``1,``2},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="mapper">Data mapping function</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageList``3(System.Data.IDbConnection,System.Int32,System.Int32,System.Func{``0,``1,``2},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="mapper">Data mapping function</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageList``4(System.Data.IDbConnection,System.Int32,System.Int32,System.Func{``0,``1,``2,``3},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageList``4(System.Data.IDbConnection,System.Int32,System.Int32,System.Func{``0,``1,``2,``3},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type TRet.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageList``5(System.Data.IDbConnection,System.Int32,System.Int32,System.Func{``0,``1,``2,``3,``4},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type TRet.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageList``5(System.Data.IDbConnection,System.Int32,System.Int32,System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type TRet.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageListAsync``1(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="sql">The where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>enumerable list of entities</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageListAsync``1(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">The parameters of the where clause to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageListAsync``2(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageListAsync``2(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageListAsync``3(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageListAsync``3(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageListAsync``4(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageListAsync``4(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageListAsync``3(System.Data.IDbConnection,System.Int32,System.Int32,System.Func{``0,``1,``2},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="mapper">Data mapping function</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageListAsync``3(System.Data.IDbConnection,System.Int32,System.Int32,System.Func{``0,``1,``2},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="mapper">Data mapping function</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageListAsync``4(System.Data.IDbConnection,System.Int32,System.Int32,System.Func{``0,``1,``2,``3},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a paged list entities of type T.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageListAsync``4(System.Data.IDbConnection,System.Int32,System.Int32,System.Func{``0,``1,``2,``3},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type TRet.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageListAsync``5(System.Data.IDbConnection,System.Int32,System.Int32,System.Func{``0,``1,``2,``3,``4},System.String,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type TRet.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageListAsync``5(System.Data.IDbConnection,System.Int32,System.Int32,System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type TRet.
            </summary>
            <param name="connection">Open SqlConnection</param>
            <param name="page">The page to request</param>
            <param name="pageSize">Number of records per page</param>
            <param name="mapper">Open SqlConnection</param>
            <param name="sql">The where clause to delete</param>
            <param name="parameters">Parameters of the clause</param>
            <param name="splitOn">The field we should split the result on to return the next object</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.GetPageListImplAsync``1(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Returns a list entities of type T.
            </summary>
            <param name="connection">Sql Connection</param>
            <param name="page">The page to return</param>
            <param name="pageSize">The number of records to return per page</param>
            <param name="sql">The where clause</param>
            <param name="parameters">Parameters of the where clause</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>True if records are deleted</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Insert``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Inserts an entity into table "Ts" and returns identity id or number of inserted rows if inserting a list.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToInsert">Entity to insert</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>the entity to insert or the list of entities</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.InsertAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToInsert">Entity to insert</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.InsertList``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Inserts an entity into table "Ts" and returns identity id or number of inserted rows if inserting a list.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entitiesToInsert">List of Entities to insert</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>the entity to insert or the list of entities</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.InsertListAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Inserts an entity into table "Ts"
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entitiesToInsert">List of Entities to insert</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if the entity was inserted</returns>
        </member>
        <member name="T:Dapper.Database.Extensions.SqlMapperExtensions.GetDatabaseTypeDelegate">
            <summary>
                The function to get a database type from the given <see cref="T:System.Data.IDbConnection" />.
            </summary>
            <param name="connection">The connection to get a database type name from.</param>
        </member>
        <member name="T:Dapper.Database.Extensions.SqlMapperExtensions.TableNameMapperDelegate">
            <summary>
                The function to get a a table name from a given <see cref="T:System.Type" />
            </summary>
            <param name="type">The <see cref="T:System.Type" /> to get a table name for.</param>
        </member>
        <member name="F:Dapper.Database.Extensions.SqlMapperExtensions.TableNameMapper">
            <summary>
                Specify a custom table name mapper
            </summary>
        </member>
        <member name="F:Dapper.Database.Extensions.SqlMapperExtensions.GetDatabaseType">
            <summary>
                Specifies a custom callback that detects the database type instead of relying on the default strategy (the name of
                the connection type object).
                Please note that this callback is global and will be used by all the calls that require a database specific
                adapter.
            </summary>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.AddSqlAdapter(System.String,Dapper.Database.Adapters.ISqlAdapter)">
            <summary>
                Configure the specified name to resolve to a custom SQL adapter.
            </summary>
            <param name="name">The name to assign the adapter.</param>
            <param name="adapter">An <see cref="T:Dapper.Database.Adapters.ISqlAdapter" /> to register under <paramref name="name" />.</param>
            <exception cref="T:System.NullReferenceException">if <paramref name="name" /> or <paramref name="adapter" /> is null.</exception>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.AddSqlAdapter(System.Data.IDbConnection,Dapper.Database.Adapters.ISqlAdapter)">
            <summary>
                Configure the specified connection to resolve to a custom SQL adapter.
            </summary>
            <param name="connection">
                An <see cref="T:System.Data.IDbConnection" /> for which the concrete type will be mapped to the specified
                adapter by name.
            </param>
            <param name="adapter">An <see cref="T:Dapper.Database.Adapters.ISqlAdapter" /> to register under <paramref name="connection" />.</param>
            <exception cref="T:System.NullReferenceException">if <paramref name="connection" /> or <paramref name="adapter" /> is null.</exception>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.AddSqlAdapter``1(Dapper.Database.Adapters.ISqlAdapter)">
            <summary>
                Configure the specified connection to resolve to a custom SQL adapter.
            </summary>
            <typeparam name="TConnection">
                An <see cref="T:System.Data.IDbConnection" /> type which will be mapped to the specified adapter by its
                <see cref="P:System.Reflection.MemberInfo.Name" />.
            </typeparam>
            <param name="adapter">An <see cref="T:Dapper.Database.Adapters.ISqlAdapter" /> to register under <typeparamref name="TConnection" />.</param>
            <exception cref="T:System.NullReferenceException">if <paramref name="adapter" /> is null.</exception>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Update``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates entity in table "Ts".
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToUpdate">Entity to be updated</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated, false if not found or not modified (tracked entities)</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Update``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{System.String},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates entity in table "Ts".
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToUpdate">Entity to be updated</param>
            <param name="columnsToUpdate">Columns to be updated</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated, false if not found or not modified (tracked entities)</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.UpdateAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates entity in table "Ts".
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToUpdate">Entity to be updated</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated, false if not found or not modified (tracked entities)</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.UpdateAsync``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{System.String},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates entity in table "Ts".
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToUpdate">Entity to be updated</param>
            <param name="columnsToUpdate">Columns to be updated</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated, false if not found or not modified (tracked entities)</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.UpdateList``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates entity in table "Ts".
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entitiesToUpdate">List of Entities to be updated</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated, false if not found or not modified (tracked entities)</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.UpdateList``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates entity in table "Ts".
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entitiesToUpdate">List of Entities to be updated</param>
            <param name="columnsToUpdate">Columns to be updated</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated, false if not found or not modified (tracked entities)</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.UpdateListAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates entity in table "Ts".
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entitiesToUpdate">List of Entities to be updated</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated, false if not found or not modified (tracked entities)</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.UpdateListAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates entity in table "Ts".
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entitiesToUpdate">List of Entities to be updated</param>
            <param name="columnsToUpdate">Columns to be updated</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated, false if not found or not modified (tracked entities)</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Upsert``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates entity in table "Ts".
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToUpsert">Entity to be updated</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated, false if not found or not modified (tracked entities)</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Upsert``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{System.String},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates entity in table "Ts".
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToUpsert">Entity to be updated</param>
            <param name="columnsToUpdate">Columns to be updated</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated, false if not found or not modified (tracked entities)</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Upsert``1(System.Data.IDbConnection,``0,System.Action{``0},System.Action{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates entity in table "Ts", checks if the entity is modified if the entity is tracked by the Get() extension.
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToUpsert">Entity to be inserted or updated</param>
            <param name="insertAction">Callback action when inserting</param>
            <param name="updateAction">Update action when updating</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated, false if not found or not modified (tracked entities)</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.Upsert``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates entity in table "Ts", checks if the entity is modified if the entity is tracked by the Get() extension.
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToUpsert">Entity to be inserted or updated</param>
            <param name="columnsToUpdate">Columns to be updated</param>
            <param name="insertAction">Callback action when inserting</param>
            <param name="updateAction">Update action when updating</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated, false if not found or not modified (tracked entities)</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.UpsertAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates entity in table "Ts".
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToUpsert">Entity to be updated</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated, false if not found or not modified (tracked entities)</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.UpsertAsync``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{System.String},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates entity in table "Ts".
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToUpsert">Entity to be updated</param>
            <param name="columnsToUpdate">Columns to be updated</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated, false if not found or not modified (tracked entities)</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.UpsertAsync``1(System.Data.IDbConnection,``0,System.Action{``0},System.Action{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates entity in table "Ts", checks if the entity is modified if the entity is tracked by the Get() extension.
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToUpsert">Entity to be inserted or updated</param>
            <param name="insertAction">Callback action when inserting</param>
            <param name="updateAction">Update action when updating</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated, false if not found or not modified (tracked entities)</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.UpsertAsync``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates entity in table "Ts", checks if the entity is modified if the entity is tracked by the Get() extension.
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToUpsert">Entity to be inserted or updated</param>
            <param name="columnsToUpdate">Columns to be updated</param>
            <param name="insertAction">Callback action when inserting</param>
            <param name="updateAction">Update action when updating</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated, false if not found or not modified (tracked entities)</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.UpsertList``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates or inserts a list of entities in table
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entitiesToUpsert">List of Entities to be updated or inserted</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated or inserted, false if not</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.UpsertList``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates or inserts a list of entities in table
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entitiesToUpsert">List of Entities to be updated or inserted</param>
            <param name="columnsToUpdate">Columns to be updated</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated or inserted, false if not</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.UpsertList``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates or inserts a list of entities in table
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entitiesToUpsert">List of Entities to be updated or inserted</param>
            <param name="insertAction">Callback action when inserting</param>
            <param name="updateAction">Update action when updating</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated or inserted, false if not</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.UpsertList``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates or inserts a list of entities in table
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entitiesToUpsert">List of Entities to be updated or inserted</param>
            <param name="columnsToUpdate">Columns to be updated</param>
            <param name="insertAction">Callback action when inserting</param>
            <param name="updateAction">Update action when updating</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated or inserted, false if not</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.UpsertListAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates or inserts a list of entities in table
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entitiesToUpsert">List of Entities to be updated or inserted</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated or inserted, false if not</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.UpsertListAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates or inserts a list of entities in table
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entitiesToUpsert">List of Entities to be updated or inserted</param>
            <param name="columnsToUpdate">Columns to be updated</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated or inserted, false if not</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.UpsertListAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates or inserts a list of entities in table
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entitiesToUpsert">List of Entities to be updated or inserted</param>
            <param name="insertAction">Callback action when inserting</param>
            <param name="updateAction">Update action when updating</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated or inserted, false if not</returns>
        </member>
        <member name="M:Dapper.Database.Extensions.SqlMapperExtensions.UpsertListAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
                Updates or inserts a list of entities in table
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entitiesToUpsert">List of Entities to be updated or inserted</param>
            <param name="columnsToUpdate">Columns to be updated</param>
            <param name="insertAction">Callback action when inserting</param>
            <param name="updateAction">Update action when updating</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated or inserted, false if not</returns>
        </member>
        <member name="T:Dapper.Database.ISqlDatabase">
            <summary>
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetTransaction">
            <summary>
                Get a transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetTransaction(System.Data.IsolationLevel)">
            <summary>
                Get a transaction
            </summary>
            <param name="isolationLevel"></param>
            <returns></returns>
        </member>
        <member name="P:Dapper.Database.ISqlDatabase.CommandTimeout">
            <summary>
                Sets the Database timeout for all transactions
            </summary>
        </member>
        <member name="P:Dapper.Database.ISqlDatabase.OneTimeCommandTimeout">
            <summary>
                Sets the timeout value for the next (and only next) SQL statement
            </summary>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Count(System.String)">
            <summary>
                Execute SQL that returns the number of matching records.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <returns>
                Total Count of matching records.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Count(System.String,System.Object)">
            <summary>
                Execute SQL that returns the number of matching records.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                Total Count of matching records.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Count``1(System.String)">
            <summary>
                Execute SQL that returns the number of matching records.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <returns>
                Total Count of matching records.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Count``1(System.String,System.Object)">
            <summary>
                Execute SQL that returns the number of matching records.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                Total Count of matching records.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.CountAsync(System.String)">
            <summary>
                Execute SQL that returns the number of matching records.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <returns>
                Total Count of matching records.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.CountAsync(System.String,System.Object)">
            <summary>
                Execute SQL that returns the number of matching records.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                Total Count of matching records.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.CountAsync``1(System.String)">
            <summary>
                Execute SQL that returns the number of matching records.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <returns>
                Total Count of matching records.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.CountAsync``1(System.String,System.Object)">
            <summary>
                Execute SQL that returns the number of matching records.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                Total Count of matching records.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Delete``1(``0)">
            <summary>
                Delete entity in table "Ts" that match the key values of the entity (T) passed in
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="entityToDelete">
                Entity to delete. If Keys are specified, they will be used as the WHERE condition to
                delete.
            </param>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Delete``1(System.Object)">
            <summary>
                Delete entity in table "Ts" by a primary key value specified on (T)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="primaryKeyValue">a Single primary key to delete</param>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Delete``1(System.String)">
            <summary>
                Delete entity in table "Ts" by an un-parameterized WHERE clause.
                If you want to Delete All of the data, call the DeleteAll() command
            </summary>
            <typeparam name="T"></typeparam>
            <param name="whereClause">The where clause to use to bound a delete, cannot be null, empty, or whitespace</param>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Delete``1(System.String,System.Object)">
            <summary>
                Delete entity(s).
            </summary>
            <typeparam name="T">The type of entity to delete.</typeparam>
            <param name="whereClause">The where clause.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.DeleteAll``1">
            <summary>
                Delete ALL entities.
            </summary>
            <typeparam name="T">The type of entity to delete.</typeparam>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.DeleteAsync``1(``0)">
            <summary>
                Delete entity in table "Ts" that match the key values of the entity (T) passed in
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="entityToDelete">
                Entity to delete. If Keys are specified, they will be used as the WHERE condition to
                delete.
            </param>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.DeleteAsync``1(System.Object)">
            <summary>
                Delete entity in table "Ts" by a primary key value specified on (T)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="primaryKeyValue">a Single primary key to delete</param>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.DeleteAsync``1(System.String)">
            <summary>
                Delete entity in table "Ts" by an un-parameterized WHERE clause.
                If you want to Delete All of the data, call the DeleteAll() command
            </summary>
            <typeparam name="T"></typeparam>
            <param name="whereClause">The where clause to use to bound a delete, cannot be null, empty, or whitespace</param>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.DeleteAsync``1(System.String,System.Object)">
            <summary>
                Delete entity(s).
            </summary>
            <typeparam name="T">The type of entity to delete.</typeparam>
            <param name="whereClause">The where clause.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.DeleteAllAsync``1">
            <summary>
                Delete ALL entities.
            </summary>
            <typeparam name="T">The type of entity to delete.</typeparam>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Execute(System.String)">
            <summary>
                Execute SQL.
            </summary>
            <param name="fullSql">The SQL to execute for this Query</param>
            <returns>
                The number of rows affected.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Execute(System.String,System.Object)">
            <summary>
                Execute parameterized SQL.
            </summary>
            <param name="fullSql">The SQL to execute for this Query</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.ExecuteAsync(System.String)">
            <summary>
                Execute SQL.
            </summary>
            <param name="fullSql">The SQL to execute for this Query</param>
            <returns>
                The number of rows affected.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.ExecuteAsync(System.String,System.Object)">
            <summary>
                Execute parameterized SQL.
            </summary>
            <param name="fullSql">The SQL to execute for this Query</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.ExecuteScalar``1(System.String)">
            <summary>
                Execute SQL that selects a single value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fullSql">The SQL to execute for this Query</param>
            <returns>
                The first cell selected as <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.ExecuteScalar``1(System.String,System.Object)">
            <summary>
                Execute parameterized SQL that selects a single value.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="fullSql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                The first cell selected as <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.ExecuteScalarAsync``1(System.String)">
            <summary>
                Execute SQL that selects a single value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fullSql">The SQL to execute for this Query</param>
            <returns>
                The first cell selected as <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.ExecuteScalarAsync``1(System.String,System.Object)">
            <summary>
                Execute parameterized SQL that selects a single value.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="fullSql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                The first cell selected as <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Exists(System.String)">
            <summary>
                Execute SQL that checks if record(s) exist.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Exists(System.String,System.Object)">
            <summary>
                Execute SQL that checks if record(s) exist.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Exists``1(``0)">
            <summary>
                Execute SQL that checks if an entity exists.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="entityToCheck">Entity to check for existence.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Exists``1(System.Object)">
            <summary>
                Execute SQL that checks if an entity exists.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="primaryKey">A single primary key to check.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Exists``1(System.String)">
            <summary>
                Execute SQL that checks if an entity exists.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="sql">The sql clause to check for existence</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Exists``1(System.String,System.Object)">
            <summary>
                Execute SQL that checks if an entity exists.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="sql">The SQL clause to check for existence.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.ExistsAsync(System.String)">
            <summary>
                Execute SQL that checks if record(s) exist.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.ExistsAsync(System.String,System.Object)">
            <summary>
                Execute SQL that checks if record(s) exist.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.ExistsAsync``1(``0)">
            <summary>
                Execute SQL that checks if an entity exists.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="entityToCheck">Entity to check for existence.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.ExistsAsync``1(System.Object)">
            <summary>
                Execute SQL that checks if an entity exists.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="primaryKey">A single primary key to check.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.ExistsAsync``1(System.String)">
            <summary>
                Execute SQL that checks if an entity exists.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="sql">The sql clause to check for existence</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.ExistsAsync``1(System.String,System.Object)">
            <summary>
                Execute SQL that checks if an entity exists.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="sql">The SQL clause to check for existence.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Get``1(``0)">
            <summary>
                Execute SQL that returns a single entity of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="entityToGet">An entity with primary key(s) populated.</param>
            <returns>
                A Single entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Get``1(System.Object)">
            <summary>
                Execute SQL that returns a single entity of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="primaryKey">A Single primary key value to retrieve. </param>
            <returns>
                A Single entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Get``1(System.String,System.Object)">
            <summary>
                Execute SQL that returns a single entity of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                A Single entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Get``2(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Get``3(System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Get``3(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Get``4(System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Get``4(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Get``3(System.Func{``0,``1,``2},System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Get``3(System.Func{``0,``1,``2},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Get``4(System.Func{``0,``1,``2,``3},System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Get``4(System.Func{``0,``1,``2,``3},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Get``5(System.Func{``0,``1,``2,``3,``4},System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Get``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetAsync``1(``0)">
            <summary>
                Execute SQL that returns a single entity of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="entityToGet">An entity with primary key(s) populated.</param>
            <returns>
                A Single entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetAsync``1(System.Object)">
            <summary>
                Execute SQL that returns a single entity of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="primaryKey">A Single primary key value to retrieve. </param>
            <returns>
                A Single entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetAsync``1(System.String,System.Object)">
            <summary>
                Execute SQL that returns a single entity of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                A Single entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetAsync``2(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetAsync``3(System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetAsync``3(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetAsync``4(System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetAsync``4(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetAsync``3(System.Func{``0,``1,``2},System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetAsync``3(System.Func{``0,``1,``2},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetAsync``4(System.Func{``0,``1,``2,``3},System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetAsync``4(System.Func{``0,``1,``2,``3},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetAsync``5(System.Func{``0,``1,``2,``3,``4},System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetAsync``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetDataTable(System.String)">
            <summary>
                Execute SQL that returns a DataTable.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <returns>
                A DataTable
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetDataTable(System.String,System.Object)">
            <summary>
                Execute SQL that returns a DataTable.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                A DataTable
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirst``1(System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T'.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <returns>
                The first matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirst``1(System.String,System.Object)">
            <summary>
                Execute SQL that returns the first entity of type 'T'.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                The first matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirst``2(System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirst``2(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirst``3(System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirst``3(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirst``4(System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirst``4(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirst``3(System.Func{``0,``1,``2},System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirst``3(System.Func{``0,``1,``2},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirst``4(System.Func{``0,``1,``2,``3},System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirst``4(System.Func{``0,``1,``2,``3},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirst``5(System.Func{``0,``1,``2,``3,``4},System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirst``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirstAsync``1(System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T'.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <returns>
                The first matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirstAsync``1(System.String,System.Object)">
            <summary>
                Execute SQL that returns the first entity of type 'T'.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                The first matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirstAsync``2(System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirstAsync``2(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirstAsync``3(System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirstAsync``3(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirstAsync``4(System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirstAsync``4(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirstAsync``3(System.Func{``0,``1,``2},System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirstAsync``3(System.Func{``0,``1,``2},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirstAsync``4(System.Func{``0,``1,``2,``3},System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirstAsync``4(System.Func{``0,``1,``2,``3},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirstAsync``5(System.Func{``0,``1,``2,``3,``4},System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetFirstAsync``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetList``1(System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T'.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetList``1(System.String,System.Object)">
            <summary>
                Execute SQL that returns all matching records of type 'T'.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetList``2(System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetList``2(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetList``3(System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetList``3(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetList``4(System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetList``4(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetList``3(System.Func{``0,``1,``2},System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetList``3(System.Func{``0,``1,``2},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetList``4(System.Func{``0,``1,``2,``3},System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetList``4(System.Func{``0,``1,``2,``3},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetList``5(System.Func{``0,``1,``2,``3,``4},System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetList``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetListAsync``1(System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T'.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetListAsync``1(System.String,System.Object)">
            <summary>
                Execute SQL that returns all matching records of type 'T'.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetListAsync``2(System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetListAsync``2(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetListAsync``3(System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetListAsync``3(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetListAsync``4(System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetListAsync``4(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetListAsync``3(System.Func{``0,``1,``2},System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetListAsync``3(System.Func{``0,``1,``2},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetListAsync``4(System.Func{``0,``1,``2,``3},System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetListAsync``4(System.Func{``0,``1,``2,``3},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetListAsync``5(System.Func{``0,``1,``2,``3,``4},System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetListAsync``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetMultiple(System.String)">
            <summary>
                Execute SQL that returns multiple result sets, and access each in turn.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <returns>
                A GridReader
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetMultiple(System.String,System.Object)">
            <summary>
                Execute SQL that returns multiple result sets, and access each in turn.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                A GridReader
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetMultipleAsync(System.String)">
            <summary>
                Execute SQL that returns multiple result sets, and access each in turn.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <returns>
                A GridReader
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetMultipleAsync(System.String,System.Object)">
            <summary>
                Execute SQL that returns multiple result sets, and access each in turn.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                A GridReader
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageList``1(System.Int32,System.Int32,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageList``1(System.Int32,System.Int32,System.String,System.Object)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageList``2(System.Int32,System.Int32,System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageList``2(System.Int32,System.Int32,System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageList``3(System.Int32,System.Int32,System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageList``3(System.Int32,System.Int32,System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageList``4(System.Int32,System.Int32,System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageList``4(System.Int32,System.Int32,System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageList``3(System.Int32,System.Int32,System.Func{``0,``1,``2},System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageList``3(System.Int32,System.Int32,System.Func{``0,``1,``2},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageList``4(System.Int32,System.Int32,System.Func{``0,``1,``2,``3},System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageList``4(System.Int32,System.Int32,System.Func{``0,``1,``2,``3},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageList``5(System.Int32,System.Int32,System.Func{``0,``1,``2,``3,``4},System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageList``5(System.Int32,System.Int32,System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageListAsync``1(System.Int32,System.Int32,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageListAsync``1(System.Int32,System.Int32,System.String,System.Object)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageListAsync``2(System.Int32,System.Int32,System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageListAsync``2(System.Int32,System.Int32,System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageListAsync``3(System.Int32,System.Int32,System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageListAsync``3(System.Int32,System.Int32,System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageListAsync``4(System.Int32,System.Int32,System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageListAsync``4(System.Int32,System.Int32,System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageListAsync``3(System.Int32,System.Int32,System.Func{``0,``1,``2},System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageListAsync``3(System.Int32,System.Int32,System.Func{``0,``1,``2},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageListAsync``4(System.Int32,System.Int32,System.Func{``0,``1,``2,``3},System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageListAsync``4(System.Int32,System.Int32,System.Func{``0,``1,``2,``3},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageListAsync``5(System.Int32,System.Int32,System.Func{``0,``1,``2,``3,``4},System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.GetPageListAsync``5(System.Int32,System.Int32,System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Insert``1(``0)">
            <summary>
                Inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to insert.</typeparam>
            <param name="entityToInsert">The Entity to insert.</param>
            <returns>
                True if the record is inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.InsertAsync``1(``0)">
            <summary>
                Inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to insert.</typeparam>
            <param name="entityToInsert">The Entity to insert.</param>
            <returns>
                True if the record is inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.InsertList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Inserts a list of entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to insert.</typeparam>
            <param name="entitiesToInsert">The IEnumerable list of Entity to insert.</param>
            <returns>
                True if records are inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.InsertListAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Inserts a list of entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to insert.</typeparam>
            <param name="entitiesToInsert">The IEnumerable list of Entity to insert.</param>
            <returns>
                True if records are inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Update``1(``0)">
            <summary>
                Updates an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update.</typeparam>
            <param name="entityToUpdate">The Entity to update.</param>
            <returns>
                True if the record is updated.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Update``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update.</typeparam>
            <param name="entityToUpdate">The Entity to update.</param>
            <param name="columnsToUpdate">The list of columns to updates.</param>
            <returns>
                True if the record is updated.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.UpdateAsync``1(``0)">
            <summary>
                Updates an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update.</typeparam>
            <param name="entityToUpdate">The Entity to update.</param>
            <returns>
                True if the record is updated.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.UpdateAsync``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update.</typeparam>
            <param name="entityToUpdate">The Entity to update.</param>
            <param name="columnsToUpdate">The list of columns to updates.</param>
            <returns>
                True if the record is updated.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.UpdateList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Updates a list of entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update.</typeparam>
            <param name="entitiesToUpdate">The IEnumerable list of Entity to update.</param>
            <returns>
                True if records are updated.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.UpdateList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Inserts a list of entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update.</typeparam>
            <param name="entitiesToUpdate">The IEnumerable list of Entity to update.</param>
            <param name="columnsToUpdate">The list of columns to updates.</param>
            <returns>
                True if records are updated.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.UpdateListAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Updates a list of entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update.</typeparam>
            <param name="entitiesToUpdate">The IEnumerable list of Entity to update.</param>
            <returns>
                True if records are updated.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.UpdateListAsync``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Inserts a list of entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update.</typeparam>
            <param name="entitiesToUpdate">The IEnumerable list of Entity to update.</param>
            <param name="columnsToUpdate">The list of columns to updates.</param>
            <returns>
                True if records are updated.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Upsert``1(``0)">
            <summary>
                Updates or inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entityToUpsert">The Entity to update or insert.</param>
            <returns>
                True if the record is updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Upsert``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates or inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entityToUpsert">The Entity to update or insert.</param>
            <param name="columnsToUpdate">The columns to update if the record exists.</param>
            <returns>
                True if the record is updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Upsert``1(``0,System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entityToUpsert">The Entity to update or insert.</param>
            <param name="insertAction">A callback function before the record is inserted.</param>
            <param name="updateAction">A callback function before the record is updated.</param>
            <returns>
                True if the record is updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.Upsert``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entityToUpsert">The Entity to update or insert.</param>
            <param name="columnsToUpdate">The columns to update if the record exists.</param>
            <param name="insertAction">A callback function before the record is inserted.</param>
            <param name="updateAction">A callback function before the record is updated.</param>
            <returns>
                True if the record is updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.UpsertAsync``1(``0)">
            <summary>
                Updates or inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entityToUpsert">The Entity to update or insert.</param>
            <returns>
                True if the record is updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.UpsertAsync``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates or inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entityToUpsert">The Entity to update or insert.</param>
            <param name="columnsToUpdate">The columns to update if the record exists.</param>
            <returns>
                True if the record is updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.UpsertAsync``1(``0,System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entityToUpsert">The Entity to update or insert.</param>
            <param name="insertAction">A callback function before the record is inserted.</param>
            <param name="updateAction">A callback function before the record is updated.</param>
            <returns>
                True if the record is updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.UpsertAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entityToUpsert">The Entity to update or insert.</param>
            <param name="columnsToUpdate">The columns to update if the record exists.</param>
            <param name="insertAction">A callback function before the record is inserted.</param>
            <param name="updateAction">A callback function before the record is updated.</param>
            <returns>
                True if the record is updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.UpsertList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Updates or inserts a list of entities and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entitiesToUpsert">The list of Entity to update or insert.</param>
            <returns>
                True if the records are updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.UpsertList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates or inserts a list of entities and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entitiesToUpsert">The list of Entity to update or insert.</param>
            <param name="columnsToUpdate">The columns to update if the record exists.</param>
            <returns>
                True if the records are updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.UpsertList``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts a list of entities and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entitiesToUpsert">The list of Entity to update or insert.</param>
            <param name="insertAction">A callback function before the record is inserted.</param>
            <param name="updateAction">A callback function before the record is updated.</param>
            <returns>
                True if the records are updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.UpsertList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts a list of entities and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entitiesToUpsert">The list of Entity to update or insert.</param>
            <param name="columnsToUpdate">The columns to update if the record exists.</param>
            <param name="insertAction">A callback function before the record is inserted.</param>
            <param name="updateAction">A callback function before the record is updated.</param>
            <returns>
                True if the records are updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.UpsertListAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Updates or inserts a list of entities and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entitiesToUpsert">The list of Entity to update or insert.</param>
            <returns>
                True if the records are updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.UpsertListAsync``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates or inserts a list of entities and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entitiesToUpsert">The list of Entity to update or insert.</param>
            <param name="columnsToUpdate">The columns to update if the record exists.</param>
            <returns>
                True if the records are updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.UpsertListAsync``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts a list of entities and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entitiesToUpsert">The list of Entity to update or insert.</param>
            <param name="insertAction">A callback function before the record is inserted.</param>
            <param name="updateAction">A callback function before the record is updated.</param>
            <returns>
                True if the records are updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.ISqlDatabase.UpsertListAsync``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts a list of entities and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entitiesToUpsert">The list of Entity to update or insert.</param>
            <param name="columnsToUpdate">The columns to update if the record exists.</param>
            <param name="insertAction">A callback function before the record is inserted.</param>
            <param name="updateAction">A callback function before the record is updated.</param>
            <returns>
                True if the records are updated or inserted.
            </returns>
        </member>
        <member name="T:Dapper.Database.Mapper.SqlMapper">
            <summary>
            </summary>
        </member>
        <member name="M:Dapper.Database.Mapper.SqlMapper.Query``2(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Mapper.SqlMapper.Query``3(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Mapper.SqlMapper.Query``4(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Mapper.SqlMapper.QueryAsync``2(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Mapper.SqlMapper.QueryAsync``3(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.Mapper.SqlMapper.QueryAsync``4(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.Database.OptimisticConcurrencyException">
            <summary>
                The exception that is thrown when an optimistic concurrency violation occurs.
            </summary>
        </member>
        <member name="M:Dapper.Database.OptimisticConcurrencyException.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Dapper.Database.OptimisticConcurrencyException" /> class.
            </summary>
        </member>
        <member name="M:Dapper.Database.OptimisticConcurrencyException.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:Dapper.Database.OptimisticConcurrencyException" /> class with the specified message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Dapper.Database.OptimisticConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
                Initializes a new instance of the <see cref="T:Dapper.Database.OptimisticConcurrencyException" /> class with the specified message
                and a reference to the inner exception.
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Dapper.Database.OptimisticConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Initializes a new instance of the <see cref="T:Dapper.Database.OptimisticConcurrencyException" /> class from serialization.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Dapper.Database.OptimisticConcurrencyException.#ctor(Dapper.Database.TableInfo,System.Object)">
            <summary>
                Initializes a new instance of the <see cref="T:Dapper.Database.OptimisticConcurrencyException" /> class with the specified entity in
                conflict.
            </summary>
            <param name="tableInfo">The <see cref="P:Dapper.Database.OptimisticConcurrencyException.TableInfo" /> associated with the exception.</param>
            <param name="entity">The entity that failed its concurrency check.</param>
        </member>
        <member name="P:Dapper.Database.OptimisticConcurrencyException.TableInfo">
            <summary>
                Information about the table associated with the exception.
            </summary>
        </member>
        <member name="P:Dapper.Database.OptimisticConcurrencyException.Entity">
            <summary>
                The entity that failed its concurrency check.
            </summary>
        </member>
        <member name="T:Dapper.Database.IPagedEnumerable`1">
            <summary>
                Represents a paged result
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Dapper.Database.IPagedEnumerable`1.CurrentPage">
            <summary>
                Current Page Requested
            </summary>
        </member>
        <member name="P:Dapper.Database.IPagedEnumerable`1.PageSize">
            <summary>
                Size of the Page Requested
            </summary>
        </member>
        <member name="P:Dapper.Database.IPagedEnumerable`1.TotalCount">
            <summary>
                Total Matching records
            </summary>
        </member>
        <member name="T:Dapper.Database.PagedList`1">
            <summary>
                Paged Result List
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dapper.Database.PagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
                Constructor
            </summary>
            <param name="source"></param>
            <param name="currentPage"></param>
            <param name="pageSize"></param>
            <param name="totalCount"></param>
        </member>
        <member name="P:Dapper.Database.PagedList`1.CurrentPage">
            <summary>
                Current Page
            </summary>
        </member>
        <member name="P:Dapper.Database.PagedList`1.PageSize">
            <summary>
                Page Size Requested
            </summary>
        </member>
        <member name="P:Dapper.Database.PagedList`1.TotalCount">
            <summary>
                Total count of matching records
            </summary>
        </member>
        <member name="T:Dapper.Database.SqlDatabase">
            <summary>
            </summary>
        </member>
        <member name="F:Dapper.Database.SqlDatabase.CacheQueries">
            <summary>
                Globally turns off query caching
            </summary>
        </member>
        <member name="F:Dapper.Database.SqlDatabase.SqlServerSelectComputed">
            <summary>
                When true computed columns are selected instead of returned in output clause
            </summary>
        </member>
        <member name="F:Dapper.Database.SqlDatabase.ConnectionService">
            <summary>
            </summary>
        </member>
        <member name="F:Dapper.Database.SqlDatabase.SharedConnection">
            <summary>
            </summary>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.#ctor(Dapper.Database.IConnectionService,System.Data.IsolationLevel)">
            <summary>
            </summary>
            <param name="connectionService"></param>
            <param name="defaultIsolationLevel">Default Isolation level to use for this database</param>
        </member>
        <member name="P:Dapper.Database.SqlDatabase.TransactionIsAborted">
            <summary>
            </summary>
        </member>
        <member name="P:Dapper.Database.SqlDatabase.TransactionCount">
            <summary>
            </summary>
        </member>
        <member name="P:Dapper.Database.SqlDatabase.CommandTimeout">
            <summary>
                Sets the timeout value for all SQL statements.
            </summary>
        </member>
        <member name="P:Dapper.Database.SqlDatabase.OneTimeCommandTimeout">
            <summary>
                Sets the timeout value for the next (and only next) SQL statement
            </summary>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Dispose">
            <summary>
            </summary>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetTransaction">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetTransaction(System.Data.IsolationLevel)">
            <summary>
            </summary>
            <param name="isolationLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.OpenSharedConnectionInternal">
            <summary>
            </summary>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.OpenSharedConnectionImp">
            <summary>
            </summary>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.CloseSharedConnection">
            <summary>
            </summary>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.CloseSharedConnectionInternal">
            <summary>
            </summary>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.ExecuteInternal``1(System.Func{``0},System.Boolean)">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command"></param>
            <param name="forceTransaction">Open a transaction if one isn't already open</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.ExecuteInternalAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command"></param>
            <param name="forceTransaction">Open a transaction if one isn't already open</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.SetTransaction(System.Data.IDbTransaction)">
            <summary>
            </summary>
            <param name="tran"></param>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.BeginTransaction">
            <summary>
            </summary>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            </summary>
            <param name="isolationLevel"></param>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.AbortTransaction">
            <summary>
            </summary>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.AbortTransaction(System.Boolean)">
            <summary>
            </summary>
            <param name="fromComplete"></param>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.CompleteTransaction">
            <summary>
            </summary>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Count(System.String)">
            <summary>
                Execute SQL that returns the number of matching records.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <returns>
                Total Count of matching records.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Count(System.String,System.Object)">
            <summary>
                Execute SQL that returns the number of matching records.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                Total Count of matching records.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Count``1(System.String)">
            <summary>
                Execute SQL that returns the number of matching records.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <returns>
                Total Count of matching records.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Count``1(System.String,System.Object)">
            <summary>
                Execute SQL that returns the number of matching records.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                Total Count of matching records.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.CountAsync(System.String)">
            <summary>
                Execute SQL that returns the number of matching records.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <returns>
                Total Count of matching records.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.CountAsync(System.String,System.Object)">
            <summary>
                Execute SQL that returns the number of matching records.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                Total Count of matching records.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.CountAsync``1(System.String)">
            <summary>
                Execute SQL that returns the number of matching records.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <returns>
                Total Count of matching records.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.CountAsync``1(System.String,System.Object)">
            <summary>
                Execute SQL that returns the number of matching records.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                Total Count of matching records.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Delete``1(``0)">
            <summary>
                Delete entity in table "Ts" that match the key values of the entity (T) passed in
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="entityToDelete">
                Entity to delete. If Keys are specified, they will be used as the WHERE condition to
                delete.
            </param>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Delete``1(System.Object)">
            <summary>
                Delete entity in table "Ts" by a primary key value specified on (T)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="primaryKeyValue">a Single primary key to delete</param>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Delete``1(System.String)">
            <summary>
                Delete entity in table "Ts" by an un-parameterized WHERE clause.
                If you want to Delete All of the data, call the DeleteAll() command
            </summary>
            <typeparam name="T"></typeparam>
            <param name="whereClause">The where clause to use to bound a delete, cannot be null, empty, or whitespace</param>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Delete``1(System.String,System.Object)">
            <summary>
                Delete entity(s).
            </summary>
            <typeparam name="T">The type of entity to delete.</typeparam>
            <param name="whereClause">The where clause.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.DeleteAll``1">
            <summary>
                Delete ALL entities.
            </summary>
            <typeparam name="T">The type of entity to delete.</typeparam>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.DeleteAsync``1(``0)">
            <summary>
                Delete entity in table "Ts" that match the key values of the entity (T) passed in
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="entityToDelete">
                Entity to delete. If Keys are specified, they will be used as the WHERE condition to
                delete.
            </param>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.DeleteAsync``1(System.Object)">
            <summary>
                Delete entity in table "Ts" by a primary key value specified on (T)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="primaryKeyValue">a Single primary key to delete</param>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.DeleteAsync``1(System.String)">
            <summary>
                Delete entity in table "Ts" by an un-parameterized WHERE clause.
                If you want to Delete All of the data, call the DeleteAll() command
            </summary>
            <typeparam name="T"></typeparam>
            <param name="whereClause">The where clause to use to bound a delete, cannot be null, empty, or whitespace</param>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.DeleteAsync``1(System.String,System.Object)">
            <summary>
                Delete entity(s).
            </summary>
            <typeparam name="T">The type of entity to delete.</typeparam>
            <param name="whereClause">The where clause.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.DeleteAllAsync``1">
            <summary>
                Delete ALL entities.
            </summary>
            <typeparam name="T">The type of entity to delete.</typeparam>
            <returns>
                True if deleted, false if not found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Execute(System.String)">
            <summary>
                Execute SQL.
            </summary>
            <param name="fullSql">The SQL to execute for this Query</param>
            <returns>
                The number of rows affected.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Execute(System.String,System.Object)">
            <summary>
                Execute parameterized SQL.
            </summary>
            <param name="fullSql">The SQL to execute for this Query</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.ExecuteAsync(System.String)">
            <summary>
                Execute SQL.
            </summary>
            <param name="fullSql">The SQL to execute for this Query</param>
            <returns>
                The number of rows affected.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.ExecuteAsync(System.String,System.Object)">
            <summary>
                Execute parameterized SQL.
            </summary>
            <param name="fullSql">The SQL to execute for this Query</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.ExecuteScalar``1(System.String)">
            <summary>
                Execute SQL that selects a single value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fullSql">The SQL to execute for this Query</param>
            <returns>
                The first cell selected as <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.ExecuteScalar``1(System.String,System.Object)">
            <summary>
                Execute parameterized SQL that selects a single value.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="fullSql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                The first cell selected as <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.ExecuteScalarAsync``1(System.String)">
            <summary>
                Execute SQL that selects a single value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fullSql">The SQL to execute for this Query</param>
            <returns>
                The first cell selected as <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.ExecuteScalarAsync``1(System.String,System.Object)">
            <summary>
                Execute parameterized SQL that selects a single value.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <param name="fullSql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                The first cell selected as <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Exists(System.String)">
            <summary>
                Execute SQL that checks if record(s) exist.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Exists(System.String,System.Object)">
            <summary>
                Execute SQL that checks if record(s) exist.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Exists``1(``0)">
            <summary>
                Execute SQL that checks if an entity exists.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="entityToCheck">Entity to check for existence.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Exists``1(System.Object)">
            <summary>
                Execute SQL that checks if an entity exists.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="primaryKey">A single primary key to check.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Exists``1(System.String)">
            <summary>
                Execute SQL that checks if an entity exists.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="sql">The sql clause to check for existence</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Exists``1(System.String,System.Object)">
            <summary>
                Execute SQL that checks if an entity exists.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="sql">The SQL clause to check for existence.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.ExistsAsync(System.String)">
            <summary>
                Execute SQL that checks if record(s) exist.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.ExistsAsync(System.String,System.Object)">
            <summary>
                Execute SQL that checks if record(s) exist.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.ExistsAsync``1(``0)">
            <summary>
                Execute SQL that checks if an entity exists.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="entityToCheck">Entity to check for existence.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.ExistsAsync``1(System.Object)">
            <summary>
                Execute SQL that checks if an entity exists.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="primaryKey">A single primary key to check.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.ExistsAsync``1(System.String)">
            <summary>
                Execute SQL that checks if an entity exists.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="sql">The sql clause to check for existence</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.ExistsAsync``1(System.String,System.Object)">
            <summary>
                Execute SQL that checks if an entity exists.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="sql">The SQL clause to check for existence.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                True if record is found.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Get``1(``0)">
            <summary>
                Execute SQL that returns a single entity of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="entityToGet">An entity with primary key(s) populated.</param>
            <returns>
                A Single entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Get``1(System.Object)">
            <summary>
                Execute SQL that returns a single entity of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="primaryKey">A Single primary key value to retrieve. </param>
            <returns>
                A Single entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Get``1(System.String,System.Object)">
            <summary>
                Execute SQL that returns a single entity of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                A Single entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Get``2(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Get``3(System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Get``3(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Get``4(System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Get``4(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Get``3(System.Func{``0,``1,``2},System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to record set.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Get``3(System.Func{``0,``1,``2},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Get``4(System.Func{``0,``1,``2,``3},System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Get``4(System.Func{``0,``1,``2,``3},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Get``5(System.Func{``0,``1,``2,``3,``4},System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Get``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetAsync``1(``0)">
            <summary>
                Execute SQL that returns a single entity of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="entityToGet">An entity with primary key(s) populated.</param>
            <returns>
                A Single entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetAsync``1(System.Object)">
            <summary>
                Execute SQL that returns a single entity of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="primaryKey">A Single primary key value to retrieve. </param>
            <returns>
                A Single entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetAsync``1(System.String,System.Object)">
            <summary>
                Execute SQL that returns a single entity of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                A Single entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetAsync``2(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetAsync``3(System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetAsync``3(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetAsync``4(System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetAsync``4(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetAsync``3(System.Func{``0,``1,``2},System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetAsync``3(System.Func{``0,``1,``2},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetAsync``4(System.Func{``0,``1,``2,``3},System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetAsync``4(System.Func{``0,``1,``2,``3},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetAsync``5(System.Func{``0,``1,``2,``3,``4},System.String,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetAsync``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a single entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                A Single entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetDataTable(System.String)">
            <summary>
                Execute SQL that returns a DataTable.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <returns>
                A DataTable
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetDataTable(System.String,System.Object)">
            <summary>
                Execute SQL that returns a DataTable.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                A DataTable
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirst``1(System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T'.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <returns>
                The first matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirst``1(System.String,System.Object)">
            <summary>
                Execute SQL that returns the first entity of type 'T'.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                The first matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirst``2(System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirst``2(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirst``3(System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirst``3(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirst``4(System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirst``4(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirst``3(System.Func{``0,``1,``2},System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirst``3(System.Func{``0,``1,``2},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirst``4(System.Func{``0,``1,``2,``3},System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirst``4(System.Func{``0,``1,``2,``3},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirst``5(System.Func{``0,``1,``2,``3,``4},System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirst``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirstAsync``1(System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T'.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <returns>
                The first matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirstAsync``1(System.String,System.Object)">
            <summary>
                Execute SQL that returns the first entity of type 'T'.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                The first matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirstAsync``2(System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirstAsync``2(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirstAsync``3(System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirstAsync``3(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirstAsync``4(System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirstAsync``4(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirstAsync``3(System.Func{``0,``1,``2},System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirstAsync``3(System.Func{``0,``1,``2},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirstAsync``4(System.Func{``0,``1,``2,``3},System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirstAsync``4(System.Func{``0,``1,``2,``3},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirstAsync``5(System.Func{``0,``1,``2,``3,``4},System.String,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetFirstAsync``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns the first entity of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                The first matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetList``1(System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T'.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetList``1(System.String,System.Object)">
            <summary>
                Execute SQL that returns all matching records of type 'T'.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetList``2(System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetList``2(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetList``3(System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetList``3(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetList``4(System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetList``4(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetList``3(System.Func{``0,``1,``2},System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetList``3(System.Func{``0,``1,``2},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetList``4(System.Func{``0,``1,``2,``3},System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetList``4(System.Func{``0,``1,``2,``3},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetList``5(System.Func{``0,``1,``2,``3,``4},System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetList``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetListAsync``1(System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T'.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetListAsync``1(System.String,System.Object)">
            <summary>
                Execute SQL that returns all matching records of type 'T'.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetListAsync``2(System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetListAsync``2(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetListAsync``3(System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetListAsync``3(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetListAsync``4(System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetListAsync``4(System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetListAsync``3(System.Func{``0,``1,``2},System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetListAsync``3(System.Func{``0,``1,``2},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetListAsync``4(System.Func{``0,``1,``2,``3},System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetListAsync``4(System.Func{``0,``1,``2,``3},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetListAsync``5(System.Func{``0,``1,``2,``3,``4},System.String,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetListAsync``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns all matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetMultiple(System.String)">
            <summary>
                Execute SQL that returns multiple result sets, and access each in turn.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <returns>
                A GridReader
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetMultiple(System.String,System.Object)">
            <summary>
                Execute SQL that returns multiple result sets, and access each in turn.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                A GridReader
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetMultipleAsync(System.String)">
            <summary>
                Execute SQL that returns multiple result sets, and access each in turn.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <returns>
                A GridReader
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetMultipleAsync(System.String,System.Object)">
            <summary>
                Execute SQL that returns multiple result sets, and access each in turn.
            </summary>
            <param name="fullSql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                A GridReader
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageList``1(System.Int32,System.Int32,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageList``1(System.Int32,System.Int32,System.String,System.Object)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageList``2(System.Int32,System.Int32,System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageList``2(System.Int32,System.Int32,System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageList``3(System.Int32,System.Int32,System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageList``3(System.Int32,System.Int32,System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageList``4(System.Int32,System.Int32,System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageList``4(System.Int32,System.Int32,System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageList``3(System.Int32,System.Int32,System.Func{``0,``1,``2},System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageList``3(System.Int32,System.Int32,System.Func{``0,``1,``2},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageList``4(System.Int32,System.Int32,System.Func{``0,``1,``2,``3},System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageList``4(System.Int32,System.Int32,System.Func{``0,``1,``2,``3},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageList``5(System.Int32,System.Int32,System.Func{``0,``1,``2,``3,``4},System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageList``5(System.Int32,System.Int32,System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageListAsync``1(System.Int32,System.Int32,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageListAsync``1(System.Int32,System.Int32,System.String,System.Object)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T'.
            </summary>
            <typeparam name="T">The type of entity to retrieve.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageListAsync``2(System.Int32,System.Int32,System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageListAsync``2(System.Int32,System.Int32,System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageListAsync``3(System.Int32,System.Int32,System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageListAsync``3(System.Int32,System.Int32,System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageListAsync``4(System.Int32,System.Int32,System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageListAsync``4(System.Int32,System.Int32,System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'T1'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="T1" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageListAsync``3(System.Int32,System.Int32,System.Func{``0,``1,``2},System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageListAsync``3(System.Int32,System.Int32,System.Func{``0,``1,``2},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageListAsync``4(System.Int32,System.Int32,System.Func{``0,``1,``2,``3},System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageListAsync``4(System.Int32,System.Int32,System.Func{``0,``1,``2,``3},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageListAsync``5(System.Int32,System.Int32,System.Func{``0,``1,``2,``3,``4},System.String,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.GetPageListAsync``5(System.Int32,System.Int32,System.Func{``0,``1,``2,``3,``4},System.String,System.Object,System.String)">
            <summary>
                Execute SQL that returns a page of matching records of type 'TRet'.
            </summary>
            <typeparam name="T1">The first type in the record set.</typeparam>
            <typeparam name="T2">The second type in the record set.</typeparam>
            <typeparam name="T3">The third type in the record set.</typeparam>
            <typeparam name="T4">The fourth type in the record set.</typeparam>
            <typeparam name="TRet">The combined type to return.</typeparam>
            <param name="page">The page number to retrieve.</param>
            <param name="pageSize">The number of records to return per page.</param>
            <param name="mapper">The function to map row types to the return type.</param>
            <param name="sql">The SQL to execute.</param>
            <param name="parameters">The parameters to use for this query.</param>
            <param name="splitOn">The field we should split the result on to return the next object.</param>
            <returns>
                An IEnumerable list of matching entity of type <typeparamref name="TRet" />.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Insert``1(``0)">
            <summary>
                Inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to insert.</typeparam>
            <param name="entityToInsert">The Entity to insert.</param>
            <returns>
                True if the record is inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.InsertAsync``1(``0)">
            <summary>
                Inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to insert.</typeparam>
            <param name="entityToInsert">The Entity to insert.</param>
            <returns>
                True if the record is inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.InsertList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Inserts a list of entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to insert.</typeparam>
            <param name="entitiesToInsert">The IEnumerable list of Entity to insert.</param>
            <returns>
                True if records are inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.InsertListAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Inserts a list of entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to insert.</typeparam>
            <param name="entitiesToInsert">The IEnumerable list of Entity to insert.</param>
            <returns>
                True if records are inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Update``1(``0)">
            <summary>
                Updates an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update.</typeparam>
            <param name="entityToUpdate">The Entity to update.</param>
            <returns>
                True if the record is updated.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Update``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update.</typeparam>
            <param name="entityToUpdate">The Entity to update.</param>
            <param name="columnsToUpdate">The list of columns to updates.</param>
            <returns>
                True if the record is updated.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.UpdateAsync``1(``0)">
            <summary>
                Updates an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update.</typeparam>
            <param name="entityToUpdate">The Entity to update.</param>
            <returns>
                True if the record is updated.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.UpdateAsync``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update.</typeparam>
            <param name="entityToUpdate">The Entity to update.</param>
            <param name="columnsToUpdate">The list of columns to updates.</param>
            <returns>
                True if the record is updated.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.UpdateList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Updates a list of entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update.</typeparam>
            <param name="entitiesToUpdate">The IEnumerable list of Entity to update.</param>
            <returns>
                True if records are updated.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.UpdateList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Inserts a list of entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update.</typeparam>
            <param name="entitiesToUpdate">The IEnumerable list of Entity to update.</param>
            <param name="columnsToUpdate">The list of columns to updates.</param>
            <returns>
                True if records are updated.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.UpdateListAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Updates a list of entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update.</typeparam>
            <param name="entitiesToUpdate">The IEnumerable list of Entity to update.</param>
            <returns>
                True if records are updated.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.UpdateListAsync``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Inserts a list of entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update.</typeparam>
            <param name="entitiesToUpdate">The IEnumerable list of Entity to update.</param>
            <param name="columnsToUpdate">The list of columns to updates.</param>
            <returns>
                True if records are updated.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Upsert``1(``0)">
            <summary>
                Updates or inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entityToUpsert">The Entity to update or insert.</param>
            <returns>
                True if the record is updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Upsert``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates or inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entityToUpsert">The Entity to update or insert.</param>
            <param name="columnsToUpdate">The columns to update if the record exists.</param>
            <returns>
                True if the record is updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Upsert``1(``0,System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entityToUpsert">The Entity to update or insert.</param>
            <param name="insertAction">A callback function before the record is inserted.</param>
            <param name="updateAction">A callback function before the record is updated.</param>
            <returns>
                True if the record is updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.Upsert``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entityToUpsert">The Entity to update or insert.</param>
            <param name="columnsToUpdate">The columns to update if the record exists.</param>
            <param name="insertAction">A callback function before the record is inserted.</param>
            <param name="updateAction">A callback function before the record is updated.</param>
            <returns>
                True if the record is updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.UpsertAsync``1(``0)">
            <summary>
                Updates or inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entityToUpsert">The Entity to update or insert.</param>
            <returns>
                True if the record is updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.UpsertAsync``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates or inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entityToUpsert">The Entity to update or insert.</param>
            <param name="columnsToUpdate">The columns to update if the record exists.</param>
            <returns>
                True if the record is updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.UpsertAsync``1(``0,System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entityToUpsert">The Entity to update or insert.</param>
            <param name="insertAction">A callback function before the record is inserted.</param>
            <param name="updateAction">A callback function before the record is updated.</param>
            <returns>
                True if the record is updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.UpsertAsync``1(``0,System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts an entity and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entityToUpsert">The Entity to update or insert.</param>
            <param name="columnsToUpdate">The columns to update if the record exists.</param>
            <param name="insertAction">A callback function before the record is inserted.</param>
            <param name="updateAction">A callback function before the record is updated.</param>
            <returns>
                True if the record is updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.UpsertList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Updates or inserts a list of entities and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entitiesToUpsert">The list of Entity to update or insert.</param>
            <returns>
                True if the records are updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.UpsertList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates or inserts a list of entities and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entitiesToUpsert">The list of Entity to update or insert.</param>
            <param name="columnsToUpdate">The columns to update if the record exists.</param>
            <returns>
                True if the records are updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.UpsertList``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts a list of entities and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entitiesToUpsert">The list of Entity to update or insert.</param>
            <param name="insertAction">A callback function before the record is inserted.</param>
            <param name="updateAction">A callback function before the record is updated.</param>
            <returns>
                True if the records are updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.UpsertList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts a list of entities and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entitiesToUpsert">The list of Entity to update or insert.</param>
            <param name="columnsToUpdate">The columns to update if the record exists.</param>
            <param name="insertAction">A callback function before the record is inserted.</param>
            <param name="updateAction">A callback function before the record is updated.</param>
            <returns>
                True if the records are updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.UpsertListAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Updates or inserts a list of entities and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entitiesToUpsert">The list of Entity to update or insert.</param>
            <returns>
                True if the records are updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.UpsertListAsync``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Updates or inserts a list of entities and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entitiesToUpsert">The list of Entity to update or insert.</param>
            <param name="columnsToUpdate">The columns to update if the record exists.</param>
            <returns>
                True if the records are updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.UpsertListAsync``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts a list of entities and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entitiesToUpsert">The list of Entity to update or insert.</param>
            <param name="insertAction">A callback function before the record is inserted.</param>
            <param name="updateAction">A callback function before the record is updated.</param>
            <returns>
                True if the records are updated or inserted.
            </returns>
        </member>
        <member name="M:Dapper.Database.SqlDatabase.UpsertListAsync``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String},System.Action{``0},System.Action{``0})">
            <summary>
                Updates or inserts a list of entities and returns true if successful.
            </summary>
            <typeparam name="T">The type of entity to update or insert.</typeparam>
            <param name="entitiesToUpsert">The list of Entity to update or insert.</param>
            <param name="columnsToUpdate">The columns to update if the record exists.</param>
            <param name="insertAction">A callback function before the record is inserted.</param>
            <param name="updateAction">A callback function before the record is updated.</param>
            <returns>
                True if the records are updated or inserted.
            </returns>
        </member>
        <member name="T:Dapper.Database.ITransaction">
            <summary>
            </summary>
        </member>
        <member name="M:Dapper.Database.ITransaction.Complete">
            <summary>
            </summary>
        </member>
        <member name="T:Dapper.Database.Transaction">
            <summary>
                Transaction object helps maintain transaction depth counts
            </summary>
        </member>
        <member name="M:Dapper.Database.Transaction.#ctor(Dapper.Database.SqlDatabase,System.Data.IsolationLevel)">
            <summary>
            </summary>
            <param name="db"></param>
            <param name="isolationLevel"></param>
        </member>
        <member name="M:Dapper.Database.Transaction.Complete">
            <summary>
            </summary>
        </member>
        <member name="M:Dapper.Database.Transaction.Dispose">
            <summary>
            </summary>
        </member>
        <member name="T:Dapper.Database.TableInfo">
            <summary>
            </summary>
        </member>
        <member name="M:Dapper.Database.TableInfo.#ctor(System.Type)">
            <summary>
                Creates a new TableInfo for the specified type with the default table mapper.
            </summary>
            <param name="type">The entity <see cref="T:System.Type" />.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="type" />
            </exception>
        </member>
        <member name="M:Dapper.Database.TableInfo.#ctor(System.Type,Dapper.Database.Extensions.SqlMapperExtensions.TableNameMapperDelegate)">
            <summary>
                Creates a new TableInfo for the specified type, with optional table mapper.
            </summary>
            <param name="type">The entity <see cref="T:System.Type" />.</param>
            <param name="tableNameMapper">A delegate for how to generate the table name from the <paramref name="type" />.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="type" />
            </exception>
        </member>
        <member name="P:Dapper.Database.TableInfo.ClassType">
            <summary>
            </summary>
        </member>
        <member name="P:Dapper.Database.TableInfo.TableName">
            <summary>
            </summary>
        </member>
        <member name="P:Dapper.Database.TableInfo.SchemaName">
            <summary>
            </summary>
        </member>
        <member name="P:Dapper.Database.TableInfo.Columns">
            <summary>
            </summary>
        </member>
        <member name="P:Dapper.Database.TableInfo.InsertColumns">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dapper.Database.TableInfo.UpdateColumns">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dapper.Database.TableInfo.SelectColumns">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dapper.Database.TableInfo.KeyColumns">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dapper.Database.TableInfo.GeneratedColumns">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Dapper.Database.TableInfo.ConcurrencyCheckColumns">
            <summary>
                Gets the set of columns to use in optimistic concurrency checks.
            </summary>
            <value>A sequence of zero or more columns.</value>
        </member>
        <member name="P:Dapper.Database.TableInfo.ComparisonColumns">
            <summary>
                Gets the set of columns to use in a <c>WHERE</c> clause in an <c>UPDATE</c> or <c>DELETE</c> statement.
                Columns should consist of key columns as well as those involved with optimistic concurrency checks.
            </summary>
            <value>A sequence of zero or more columns.</value>
        </member>
        <member name="P:Dapper.Database.TableInfo.SqlServerSelectComputed">
            <summary>
                Returns computed columns with select query vs. output clause.
                This corrects issues related to triggers applied and error "The target table '{Table}' of the DML statement cannot
                have any enabled triggers"
            </summary>
        </member>
        <member name="M:Dapper.Database.TableInfo.GetSingleKey">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.Database.TableInfo.GetCompositeKeys">
            <summary>
                Gets a list of all key columns defined on the table
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dapper.Database.ColumnInfo">
            <summary>
            </summary>
        </member>
        <member name="P:Dapper.Database.ColumnInfo.ColumnName">
            <summary>
            </summary>
        </member>
        <member name="P:Dapper.Database.ColumnInfo.PropertyName">
            <summary>
            </summary>
        </member>
        <member name="P:Dapper.Database.ColumnInfo.IsKey">
            <summary>
            </summary>
        </member>
        <member name="P:Dapper.Database.ColumnInfo.IsGenerated">
            <summary>
            </summary>
        </member>
        <member name="P:Dapper.Database.ColumnInfo.IsIdentity">
            <summary>
            </summary>
        </member>
        <member name="P:Dapper.Database.ColumnInfo.ExcludeOnInsert">
            <summary>
            </summary>
        </member>
        <member name="P:Dapper.Database.ColumnInfo.ExcludeOnUpdate">
            <summary>
            </summary>
        </member>
        <member name="P:Dapper.Database.ColumnInfo.ExcludeOnSelect">
            <summary>
            </summary>
        </member>
        <member name="P:Dapper.Database.ColumnInfo.Property">
            <summary>
            </summary>
        </member>
        <member name="P:Dapper.Database.ColumnInfo.SequenceName">
            <summary>
            </summary>
        </member>
        <member name="P:Dapper.Database.ColumnInfo.Output">
            <summary>
            </summary>
        </member>
        <member name="P:Dapper.Database.ColumnInfo.IsNullable">
            <summary>
                Indicates whether this column can be set to a null value.
            </summary>
        </member>
        <member name="P:Dapper.Database.ColumnInfo.IsConcurrencyToken">
            <summary>
                Indicates whether this column should be included in a <c>WHERE</c> clause in an <c>UPDATE</c> or <c>DELETE</c>
                statement as part of concurrency management.
            </summary>
            <seealso cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" />
            <seealso cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" />
        </member>
        <member name="M:Dapper.Database.ColumnInfo.GetValue``1(``0)">
            <summary>
                Gets the value of the specified column for a given instance of the object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <returns></returns>
        </member>
    </members>
</doc>
