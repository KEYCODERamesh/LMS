@model HospitalManagementSystem.Assigned_test_DT

@{
    ViewBag.Title = "Pat_Registration";
    Layout = "~/Views/Shared/_MainPageLayout.cshtml";
    <script src="~/Content/assets/js/jquery-3.3.1.min.js"></script>
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link href="~/Scripts/Autocomplete/Jquery-ui.css" rel="stylesheet" />
    <script src="~/Scripts/Autocomplete/jquery-1.10.2.js" type="text/javascript"></script>
    <script src="~/Scripts/Autocomplete/jquery-ui.js" type="text/javascript"></script>
</head>
<body>
    <div class="page-body">
        <!-- Container-fluid starts-->
        <div class="container-fluid">
            <div class="page-body-wrapper">
                <div class="container-fluid">
                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()

                        <div class="form-horizontal">
                            <h4>New Patient Registration</h4>
                            <hr />
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            <div class="row">
                                <div class="col-md-1">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Title, "Title", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.DropDownList("SelectTitels", (IEnumerable<SelectListItem>)ViewData["ListItems"], new { @class = "form-control" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Gender, "*Gender", htmlAttributes: new { @class = "control-label col-md-3" })
                                        <div class="col-md-10">
                                            @Html.DropDownList("ddlgenders", (IEnumerable<SelectListItem>)ViewData["Genders"], new { @class = "form-control dropdown-toggle" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-5">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.FirstName, "* First Name", htmlAttributes: new { @class = "control-label col-md-3" })
                                        <div class="col-md-10">
                                            <input type="text" id="txtfirstnames" placeholder="Enter First Name" class="form-control" required="" />
                                            @*@Html.ValidationMessageFor(model => model.FirstName, "Please enter First Name", new { @class = "text- danger", style = "display:none" })*@
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.LastName, "* Last Name", htmlAttributes: new { @class = "control-label col-md-3" })
                                        <div class="col-md-10">
                                            <input type="text" id="txtlastnames" placeholder="Enter Last Name" class="form-control" required="" />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">

                                <div class="col-md-5">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.AadharNos, "Aadhar No(12 Digit).", htmlAttributes: new { @class = "control-label col-md-4" })
                                        <div class="col-md-10">
                                            @*@Html.EditorFor(model => model.AadharNos, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.AadharNos, "", new { @class = "text-danger" })*@
                                            <input type="text" id="txtaadharnos" placeholder="Enter Aadhar No" class="form-control" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-7">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.AddressDetails, "Patinet's Address", htmlAttributes: new { @class = "control-label col-md-3" })
                                        <div class="col-md-10">
                                            <input type="text" id="txtaddress" placeholder="Enter Address Details" class="form-control" />
                                        </div>
                                    </div>

                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-1">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.AgeYear, "*Year", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            <input type="text" id="txtageinyears" placeholder="YEAR" class="form-control" required=""/>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-1">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Inmonth, "*Month", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            <input type="text" id="txtageinmonth" placeholder="MON" class="form-control" required=""/>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-1">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.InDays, "*Days", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            <input type="text" id="txtageindays" placeholder="DAY" class="form-control" required=""/>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-3">

                                    <div class="form-group">
                                      @Html.LabelFor(model => model.MobileNo, "*Mobile", htmlAttributes: new { @class = "control-label col-md-3" })
                                        <div class="col-md-10">
                                            <input type="text" id="txtmobilenos" placeholder="ENTER MOBILE NO" class="form-control" required="" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-5">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.EmailID, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            <input type="text" id="txtemailid" placeholder="ENTER EMAIL-ID" class="form-control" />
                                        </div>
                                    </div>

                                </div>

                            </div>
                            <hr />

                            <h4> CASE DETAILS</h4>
                            <br />
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.DoctorID, "* Referred By", htmlAttributes: new { @class = "control-label col-md-3" })
                                        @*<input type="submit" id="btnaddrefreals" value="+ Add New" class="btn btn-outline-primary" />*@
                                        @*<a href="/Referal/Index" class="btn btn-outline-primary">Add Referrar</a>*@
                                        <div class="col-md-10">
                                            @*@Html.DropDownList("SelectedItem", (IEnumerable<SelectListItem>)ViewData["Centers"], new { @class = "form-control dropdown-toggle" })*@
                                            @Html.DropDownList("ddldoctors", ViewBag.ReferalList as SelectList, new { @class = "form-control" })
                                            <a href="/Referal/Index" class="btn btn-outline-primary">Add New Referrar</a>
                                        </div>
                                    </div>

                                </div>

                                <div class="col-md-2">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.CollectionCenter, "Center", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-5">
                                            @*@Html.EditorFor(model => model.CollectionCenter, new { htmlAttributes = new { @class = "form-control" } })
                                                @Html.ValidationMessageFor(model => model.CollectionCenter, "", new { @class = "text-danger" })*@
                                            @Html.DropDownList("ddlcenters", (IEnumerable<SelectListItem>)ViewData["Centers"], new { @class = "form-control dropdown-toggle" })
                                        </div>
                                    </div>

                                </div>
                                <div class="col-md-3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.SampleColAgents, "Col. Agent", htmlAttributes: new { @class = "control-label col-md-3" })

                                        <div class="col-md-10">
                                            @Html.DropDownList("ddlagents", ViewBag.AgentList as SelectList, new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.SampleColAgents, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-1">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.SampleColAgents, "New", htmlAttributes: new { @class = "control-label col-md-3" })
                                        <div class="col-md-10">
                                            <a href="/Referal/Index" class="btn btn-outline-primary">Add</a>
                                        </div>
                                    </div>


                                </div>
                            </div>
                            <table id="tblpanellist" class="table" cellpadding="0" cellspacing="0">
                                <thead>
                                    <tr>
                                        <th style="width:500px">Package/Panel Name/Test Name</th>
                                        <th style="width:150px">Fee</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td><input type="text" id="txtpanelnames" placeholder="Search Package/Panel/Test Name" class="form-control" /></td>
                                        <td> <input type="text" id="txtfpanelfees" class="form-control" /></td>
                                        <td><input type="button" id="btnAddpanels" value="+ ADD INVESTIGATION" class="btn btn-outline-primary" /></td>
                                    </tr>
                                </tfoot>
                            </table>

                            <hr />

                            <h4>PAYMENT DETAILS</h4>
                            <hr />

                            <div class="row">
                                <div class="col-md-2">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TotRs, "Total", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            <input type="text" id="txtamounts" placeholder="AMOUNT" class="form-control" readonly/>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-2">

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Discounts, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            <input type="text" id="txtdiscounts" placeholder="DIS RS..." class="form-control" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-2">

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Discounts, "PAYABLE", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            <input type="text" id="txtpayables" placeholder="PAYABLE" class="form-control" readonly/>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Paid, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            <input type="text" id="txtpaids" placeholder="PAID" class="form-control" required=""/>
                                        </div>
                                    </div>

                                </div>
                                <div class="col-md-2">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Balance, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            <input type="text" id="txtbalance" placeholder="BALANCE" class="form-control" readonly/>
                                        </div>
                                    </div>

                                </div>
                                <div class="col-md-2">

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.PayMode, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.DropDownList("ddlpaymodes", (IEnumerable<SelectListItem>)ViewData["PayModes"], "--Select--", new { @class = "form-control dropdown-toggle", @onChange = "SelectedPayMode(this)" })
                                            @Html.ValidationMessageFor(model => model.PayMode, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-2">

                                </div>

                            </div>

                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" id="btnSubmit" value="Save Registration" class="btn btn-outline-primary" />
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>




    <script type="text/javascript">


        $(function () {
            $("#txtpanelnames").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/PatientRegistration/SearchPanelandTestNames/',
                        data: "{'term': '" + request.term + "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function (item) {
                                return item;
                            }))
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {

                    $("#txtfpanelfees").val(i.item.val);
                },
                minLength: 1
            });
        });


    </script>


    <script type="text/javascript">
        $("body").on("click", "#btnAddpanels", function () {
            //Reference the Name and Country TextBoxes.
            var txtName = $("#txtpanelnames");
            var txtFees = $("#txtfpanelfees");
            var Totalamount = 0;
            //Get the reference of the Table's TBODY element.
            var tBody = $("#tblpanellist > TBODY")[0];

            //Add Row.
            var row = tBody.insertRow(-1);

            //Add Name cell.
            var cell = $(row.insertCell(-1));
            cell.html(txtName.val());

            //Add Fee cell.
            var cell = $(row.insertCell(-1));
            cell.html(txtFees.val());


            //Add Button cell.
            cell = $(row.insertCell(-1));
            var btnRemove = $("<input />");
            btnRemove.attr("type", "button");
            btnRemove.attr("onclick", "Remove(this);");
            btnRemove.addClass("btn btn-outline-danger");
            btnRemove.val("Remove");

            cell.append(btnRemove);
            $("#tblpanellist TBODY TR").each(function () {
                var row = $(this);
                //customer.Fees = row.find("TD").eq(1).html();
                Totalamount += parseFloat(row.find("TD").eq(1).html());
            });


            if (!isNaN(Totalamount)) {
                $('#txtamounts').val(Totalamount.toFixed());
            }
            else {
                $('#txtamounts').val(Totalamount);
            }
            txtName.val("");
            txtFees.val("");

            $('#txtdiscounts').val(0);
            $('#txtpayables').val(Totalamount);
            $('#txtpaids').val(Totalamount);
            $('#txtbalance').val(0);
        });

        function Remove(button) {
            //Determine the reference of the Row using the Button.
            var row = $(button).closest("TR");
            var name = $("TD", row).eq(0).html();
            if (confirm("Do you want to delete: " + name)) {
                //Get the reference of the Table.
                var table = $("#tblpanellist")[0];

                //Delete the Table row using it's Index.
                table.deleteRow(row[0].rowIndex);

                var Totalamount = 0;
                $("#tblpanellist TBODY TR").each(function () {
                    var row = $(this);
                    //customer.Fees = row.find("TD").eq(1).html();
                    Totalamount += parseFloat(row.find("TD").eq(1).html());
                });


                if (!isNaN(Totalamount)) {
                    $('#txtamounts').val(Totalamount.toFixed());
                }
                else {
                    $('#txtamounts').val(Totalamount);
                }
                txtName.val("");
                txtFees.val("");

                $('#txtdiscounts').val(0);
                $('#txtpayables').val(Totalamount);
                $('#txtpaids').val(Totalamount);
                $('#txtbalance').val(0);
                // CalculateTotal();
            }
        };


        $("body").on("click", "#btnSubmit", function () {
            //Loop through the Table rows and build a JSON array.
            var patients = new Array();

            //alert("Selected value is " + $("#City").val() + "and Selected Text is " + $("#City option:selected").text());

            var Title = $("#SelectTitels option:selected").text();
            //var selectedText = ddlObject.options[ddlObject.selectedIndex].innerHTML;
            var Gender = $("#ddlgenders option:selected").text();
            var FirstName = document.getElementById("txtfirstnames").value;
            var LastName = document.getElementById("txtlastnames").value;
            var AadharNos = document.getElementById("txtaadharnos").value;
            var AddressDetails = document.getElementById("txtaddress").value;

            var AgeYear = document.getElementById("txtageinyears").value;
            var Inmonth = document.getElementById("txtageinmonth").value;
            var InDays = document.getElementById("txtageindays").value;
            var MobileNo = document.getElementById("txtmobilenos").value;
            var EmailID = document.getElementById("txtemailid").value;

            var DoctorID = $("#ddldoctors").val();
            var CollectionCenter = $("#ddlcenters option:selected").text();
            // var Agents = $("#ddlagents option:selected").text();
            var SampleColAgents = $("#ddlagents").val();
            var PayMode = $("#ddlpaymodes option:selected").text();


            var TotRs = document.getElementById("txtamounts").value;
            var Discounts = document.getElementById("txtdiscounts").value;
            var Payables = document.getElementById("txtpayables").value;
            var Paid = document.getElementById("txtpaids").value;
            var Balance = document.getElementById("txtbalance").value;


            $("#tblpanellist TBODY TR").each(function () {
                var row = $(this);
                var patdetails = {};
                patdetails.Title = Title;
                patdetails.Gender = Gender;
                patdetails.LastName = LastName;
                patdetails.FirstName = FirstName;
                patdetails.LastName = LastName;
                patdetails.AadharNos = AadharNos;
                patdetails.AddressDetails = AddressDetails;
                patdetails.AgeYear = AgeYear;
                patdetails.Inmonth = Inmonth;
                patdetails.InDays = InDays;
                patdetails.MobileNo = MobileNo;
                patdetails.EmailID = EmailID;
                patdetails.DoctorID = DoctorID;
                patdetails.CollectionCenter = CollectionCenter;
                patdetails.SampleColAgents = SampleColAgents;
                patdetails.PayMode = PayMode;

                patdetails.TotRs = TotRs;
                patdetails.Discounts = Discounts;
                patdetails.Payables = Payables;
                patdetails.Paid = Paid;
                patdetails.Balance = Balance;

                // Loop through Test details
                patdetails.TsetName = row.find("TD").eq(0).html();
                patdetails.Rate = row.find("TD").eq(1).html();


                patients.push(patdetails);

            });

            //Send the JSON array to Controller using AJAX.
            $.ajax({
                type: "POST",
                url: "/PatientRegistration/SaveRegistrations",
                data: JSON.stringify(patients),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (r) {
                    alert(r + " record(s) inserted.");
                },
                error: function (r) {
                   // alert("error");
                },
                failure: function (r) {
                    //alert("Failures");
                }

            });
        });
    </script>



    <script>
        //To get selected value an text of dropdownlist
        function SelectedPayMode(ddlObject) {
            //Selected value of dropdownlist
            var selectedValue = ddlObject.value;
            //Selected text of dropdownlist
            var selectedText = ddlObject.options[ddlObject.selectedIndex].innerHTML;

            //alert popup with detail of seleceted value and text
            alert(" At Index: " + selectedValue + " -- " + "Selected PayMode: " + selectedText);
        }
    </script>




    <script>

    $(document).ready(function() {
        //to allow only numberic
        $('#txtmobilenos').keypress(function(e) {
            NumericOnly(e);
        });

        $('#txtageinyears').keypress(function (e) {
            NumericOnly(e);
        });

        $('#txtageinmonth').keypress(function (e) {
            NumericOnly(e);
        });

        $('#txtageindays').keypress(function (e) {
            NumericOnly(e);
        });

        $('#txtdiscounts').keypress(function (e) {
            NumericOnly(e);
        });

        $('#txtageindays').keypress(function (e) {
            NumericOnly(e);
        });
    });


      


    //to check all fields where user enter correct or not
    // if not entered correct ,it will prevent to sumbit form


        //function ValidateUser() {
        //event = event || window.event || event.srcElement;
        //var return_val = true;
        //if ($('#FirstName').val().trim() == '') {
        //    $('#FirstName').next('span').show();
        //    return_val = false;
        //} else {
        //    $('#FirstName').next('span').hide();
        //}
        //if ($('#LastName').val().trim() == '') {
        //    $('#LastName').next('span').show();
        //    return_val = false;
        //} else {
        //    $('#LastName').next('span').hide();
        //}
        //if ($('#Email').val().trim() == '') {
        //    $('#Email').next('span').text('Please enter Email').show();
        //    return_val = false;
        //} else {
        //    $('#Email').next('span').hide();
        //    if (fnValidateEmail($('#Email').val().trim()) == false) {
        //        $('#Email').next('span').text('Please enter valid Email').show();
        //        return_val = false;
        //    } else {
        //        $('#Email').next('span').text('Please enter Email').hide();
        //    }
        //}
        //if ($('#Password').val().trim() == '') {
        //    $('#Password').next('span').show();
        //    return_val = false;
        //} else {
        //    $('#Password').next('span').hide();
        //    if (PasswordStrengthCheck($('#Password').val().trim()) == false) {
        //        return_val = false;
        //    }
        //}
        //if ($('#Contact').val().trim() == '') {
        //    $('#Contact').next('span').show();
        //    return_val = false;
        //} else {
        //    $('#Contact').next('span').hide();
        //}
        //if (!return_val) {
        //    event.preventDefault();
        //}
        //}


    // to check password strength
    @*function PasswordStrengthCheck(password) {
        var return_val = true;
        if (password != '') {
            if (password.length < 8) {
                $('#Password').next('span').text('Be at least 8 characters').show();
                $('#Password').focus();
                return_val = false;
            } else if (!password.match(/[A-z]/)) {
                $('#Password').next('span').text('At least one letter').show();
                $('#Password').focus();
                return_val = false;
            } else if (!password.match(/[A-Z]/)) {
                $('#Password').next('span').text('At least one uppercase alphabet').show();
                $('#Password').focus();
                return_val = false;
            } else if (!password.match(/[a-z]/)) {
                $('#Password').next('span').text('At least one lowercase alphabet').show();
                $('#Password').focus();
                return_val = false;
            } else if (!password.match(/\d/)) {
                $('#Password').next('span').text('At least one number').show();
                $('#Password').focus();
                return_val = false;
            } else if (!password.match(/[ !@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/)) {
                $('#Password').next('span').text('At least one special character').show();
                $('#Password').focus();
                return_val = false;
            } else {
                $('#Password').next('span').text('').hide();
            }
        } else {
            $('#Password').next('span').text('Please enter Password').show();
            return_val = false;
        }
        return return_val;
    };*@
    // to check email formate
    @*function fnValidateEmail(email) {
        var expr = /^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
        return expr.test(email);
    };*@

    function NumericOnly(e) {
        var regex = new RegExp("^[0-9]+$");
        var str = String.fromCharCode(!e.charCode ? e.which : e.charCode);
        if (regex.test(str)) {
            return true;
        }
        e.preventDefault();
        return false;
    };
    </script>
</body>
</html>
